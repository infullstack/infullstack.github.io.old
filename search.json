[{"title":"2018","url":"https://infullstack.github.io/2018/01/01/2018/","content":"<p><img src=\"https://images.unsplash.com/photo-1451481454041-104482d8e284?auto=format&amp;fit=crop&amp;w=2550&amp;q=80\" alt=\"\"></p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"https://infullstack.github.io/2017/12/27/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"大数据技术文章索引","url":"https://infullstack.github.io/2017/07/05/大数据技术文章索引/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/filip-gielda-94858.jpg?imageView2/1/w/2400/h/800/\" alt=\"\"></p>\n<h2 id=\"存储格式\"><a href=\"#存储格式\" class=\"headerlink\" title=\"存储格式\"></a>存储格式</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/in-depth-analysis-of-parquet-column-storage-format\" target=\"_blank\" rel=\"noopener\">深入分析Parquet列式存储格式</a></li>\n<li><a href=\"http://dongxicheng.org/mapreduce-nextgen/columnar-storage-parquet-and-orc/\" target=\"_blank\" rel=\"noopener\">大数据开源列式存储引擎Parquet和ORC</a></li>\n<li><a href=\"https://www.iteblog.com/archives/1014.html\" target=\"_blank\" rel=\"noopener\">Hive:ORC File Format存储格式详解</a></li>\n</ul>\n<h2 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h2><ul>\n<li><a href=\"http://www.uml.org.cn/sjjm/201309044.asp\" target=\"_blank\" rel=\"noopener\">HDFS 原理、架构与特性介绍</a></li>\n<li><a href=\"http://blog.csdn.net/weixuehao/article/details/16967485\" target=\"_blank\" rel=\"noopener\">HDFS的运行原理</a></li>\n<li><a href=\"http://www.it165.net/admin/html/201407/3465.html\" target=\"_blank\" rel=\"noopener\">Namenode HA原理详解</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25928166\" target=\"_blank\" rel=\"noopener\">Apache Kudu 加速对频繁更新数据的分析</a></li>\n<li><a href=\"http://www.leiphone.com/news/201610/rRTDqNk6lQrInqje.html\" target=\"_blank\" rel=\"noopener\">基于内存的统一分布式存储系统 Alluxio 及其应用</a></li>\n</ul>\n<h2 id=\"计算引擎\"><a href=\"#计算引擎\" class=\"headerlink\" title=\"计算引擎\"></a>计算引擎</h2><ul>\n<li><a href=\"http://blog.jobbole.com/84089/\" target=\"_blank\" rel=\"noopener\">MapReduce框架详解</a></li>\n<li><a href=\"http://langyu.iteye.com/blog/992916\" target=\"_blank\" rel=\"noopener\">MapReduce:详解Shuffle过程</a></li>\n<li><a href=\"http://blog.csdn.net/lovehuangjiaju/article/details/48634607\" target=\"_blank\" rel=\"noopener\">Spark运行原理</a></li>\n<li><a href=\"http://tech.meituan.com/spark-tuning-basic.html\" target=\"_blank\" rel=\"noopener\">Spark性能优化指南</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-flink/\" target=\"_blank\" rel=\"noopener\">新一代大数据处理引擎 Apache Flink</a></li>\n<li><a href=\"http://shiyanjun.cn/archives/1508.html\" target=\"_blank\" rel=\"noopener\">Apache Flink：特性、概念、组件栈、架构及原理分析</a></li>\n</ul>\n<h2 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h2><h2 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h2><ul>\n<li><a href=\"http://shiyanjun.cn/archives/1002.html\" target=\"_blank\" rel=\"noopener\">Hue安装配置实践</a></li>\n<li><a href=\"http://www.cnblogs.com/smartloli/p/5191155.html\" target=\"_blank\" rel=\"noopener\">Azkaban 作业调度</a></li>\n</ul>\n<h2 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h2><ul>\n<li><a href=\"http://blog.csdn.net/dbanote/article/details/8897599\" target=\"_blank\" rel=\"noopener\">[HBase] LSM树 VS B+树</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/70467\" target=\"_blank\" rel=\"noopener\">HBase在阿里的应用实践</a></li>\n</ul>\n<h2 id=\"SQL引擎\"><a href=\"#SQL引擎\" class=\"headerlink\" title=\"SQL引擎\"></a>SQL引擎</h2><ul>\n<li><a href=\"http://www.csdn.net/article/2013-12-04/2817707-Impala-Big-Data-Engine\" target=\"_blank\" rel=\"noopener\">Impala：新一代开源大数据分析引擎</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/apache-kylin-algorithm/\" target=\"_blank\" rel=\"noopener\">Apache Kylin的快速数据立方体算法——概述</a></li>\n<li><a href=\"http://tech.meituan.com/presto.html\" target=\"_blank\" rel=\"noopener\">Presto实现原理和美团的使用实践</a></li>\n</ul>\n<h2 id=\"流处理\"><a href=\"#流处理\" class=\"headerlink\" title=\"流处理\"></a>流处理</h2><ul>\n<li><a href=\"http://shiyanjun.cn/archives/1472.html\" target=\"_blank\" rel=\"noopener\">Apache Storm内部原理分析</a></li>\n</ul>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><ul>\n<li><a href=\"http://tech.meituan.com/mq-design.html\" target=\"_blank\" rel=\"noopener\">消息队列设计精要</a></li>\n<li><a href=\"http://www.jasongj.com/2015/01/02/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">Kafka深度解析</a></li>\n<li><p><a href=\"http://tech.meituan.com/kafka-fs-design-theory.html\" target=\"_blank\" rel=\"noopener\">Kafka文件存储机制那些事</a></p>\n<h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2></li>\n<li><p><a href=\"https://my.oschina.net/leejun2005/blog/288136\" target=\"_blank\" rel=\"noopener\">Flume NG 简介及配置实战</a></p>\n</li>\n<li><a href=\"http://shiyanjun.cn/archives/1497.html\" target=\"_blank\" rel=\"noopener\">Flume日志收集分层架构应用实践</a></li>\n<li><a href=\"http://student-lp.iteye.com/blog/2157983\" target=\"_blank\" rel=\"noopener\">Sqoop详解</a></li>\n<li><a href=\"http://tech.meituan.com/mt-log-system-arch.html\" target=\"_blank\" rel=\"noopener\">基于Flume的美团日志收集系统(一)架构和设计</a></li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/kylin-apache-in-meituan-olap-scenarios-practice\" target=\"_blank\" rel=\"noopener\">Apache Kylin在美团数十亿数据OLAP场景下的实践</a></li>\n<li><a href=\"http://tech.meituan.com/spark-in-meituan.html\" target=\"_blank\" rel=\"noopener\">Spark在美团的实践</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s/OJdlpP62YWGmVnBWsfpVZw\" target=\"_blank\" rel=\"noopener\">携程实时用户行为系统实践</a></li>\n</ul>\n<h2 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h2><ul>\n<li><a href=\"http://www.shaheng.me/blog/2015/06/elasticsearch--.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch架构原理</a></li>\n<li><p><a href=\"http://solr-vs-elasticsearch.com/\" target=\"_blank\" rel=\"noopener\">solr vs elasticsearch 功能比较</a></p>\n<h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2></li>\n<li><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-mahout/\" target=\"_blank\" rel=\"noopener\">Apache Mahout 简介</a></p>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><a href=\"http://mp.weixin.qq.com/s/mO9Ht3pBlvDUFd-cUmz99w\" target=\"_blank\" rel=\"noopener\">谷歌新发布的分布式数据库服务，是要打破CAP定理了吗？</a></li>\n<li><a href=\"https://m.aliyun.com/yunqi/articles/67000?tk=7msDtByJNMqIx7H1CqaPNnPbyUQ36CfaBHCMB9l9R4w%3D\" target=\"_blank\" rel=\"noopener\">分布式(hadoop)内核研发面试指南</a></li>\n</ul>\n","categories":[],"tags":["大数据","hadoop","parquet","hdfs","spark"]},{"title":"shell逐行读取文本的几种方法","url":"https://infullstack.github.io/2017/05/22/shell逐行读取文本的几种方法/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/andreas-ronningen-31469.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<p>经常会对文体文件进行逐行处理，在Shell里面如何获取每行数据，然后处理该行数据，最后读取下一行数据，循环处理．有多种解决方法如下：</p>\n<h3 id=\"通过read命令完成．\"><a href=\"#通过read命令完成．\" class=\"headerlink\" title=\"通过read命令完成．\"></a>通过read命令完成．</h3><p>read命令接收标准输入，或其他文件描述符的输入，得到输入后，read命令将数据放入一个标准变量中．</p>\n<p>利用read读取文件时，每次调用read命令都会读取文件中的”一行”文本．</p>\n<p>当文件没有可读的行时，read命令将以非零状态退出．</p>\n<p>复制代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.dat | while read line</span><br><span class=\"line\">do</span><br><span class=\"line\">   echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"> </span><br><span class=\"line\">while read line</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done &lt; data.dat</span><br></pre></td></tr></table></figure></p>\n<p>2.使用awk命令完成</p>\n<p>awk是一种优良的文本处理工具，提供了极其强大的功能．</p>\n<p>利用awk读取文件中的每行数据，并且可以对每行数据做一些处理，还可以单独处理每行数据里的每列数据．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.dat | awk &apos;&#123;print $0&#125;&apos;</span><br><span class=\"line\">cat data.dat | awk &apos;for(i=2;i&lt;NF;i++) &#123;printf $i&#125; printf &quot;\\n&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>第1行代码输出data.dat里的每行数据，第2代码输出每行中从第2列之后的数据．</p>\n<p>如果是单纯的数据或文本文件的按行读取和显示的话，使用awk命令比较方便．</p>\n<p>3.使用for var in file 命令完成</p>\n<p>for var in file　表示变量var在file中循环取值．取值的分隔符由$IFS确定．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(cat data.dat)</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"> </span><br><span class=\"line\">for line in `cat data.dat`</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>如果输入文本每行中没有空格，则line在输入文本中按换行符分隔符循环取值．</p>\n<p>如果输入文本中包括空格或制表符，则不是换行读取，line在输入文本中按空格分隔符或制表符或换行符特环取值．</p>\n<p>可以通过把IFS设置为换行符来达到逐行读取的功能．</p>\n<p>IFS的默认值为：空白(包括：空格，制表符，换行符)．</p>\n<h3 id=\"字符串split\"><a href=\"#字符串split\" class=\"headerlink\" title=\"字符串split\"></a>字符串split</h3><p>获取到每行的文本字符串，也许还会用到字符串的切分，可以使用以下方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp_str=&quot;a,b,c&quot;</span><br><span class=\"line\">table=($&#123;tmp_str//,/ &#125;)</span><br><span class=\"line\">table_name=$&#123;table[1]&#125;</span><br><span class=\"line\">cube_name=$&#123;table[0]&#125;</span><br><span class=\"line\">echo $table_name $cube_name</span><br></pre></td></tr></table></figure>","categories":[],"tags":["shell","逐行"]},{"title":"浅谈NBA常规赛MVP","url":"https://infullstack.github.io/2017/04/07/浅谈NBA常规赛MVP/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/maxresdefault.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<p>16-17赛季常规赛接近尾声，西部季后赛球队名单和排名基本确定，反观东部，3-4名还在争夺，5/6/7/8/9还在激烈争夺。</p>\n<p>常规赛MVP，这个赛季也是竞争相当激烈。</p>\n<h2 id=\"MVP候选浅析\"><a href=\"#MVP候选浅析\" class=\"headerlink\" title=\"MVP候选浅析\"></a>MVP候选浅析</h2><h3 id=\"詹姆斯-哈登\"><a href=\"#詹姆斯-哈登\" class=\"headerlink\" title=\"詹姆斯.哈登\"></a>詹姆斯.哈登</h3><p>哈登场均29.1分8.1个篮板11.2次助攻，助攻居联盟第一，得分居联盟第二，火箭至今52胜25负，列西部第三，也是全联盟第三最佳战绩。</p>\n<h3 id=\"韦斯特布鲁克\"><a href=\"#韦斯特布鲁克\" class=\"headerlink\" title=\"韦斯特布鲁克\"></a>韦斯特布鲁克</h3><p>场均31.8分，10.7个篮板，10.4次助攻，雷霆战绩西部第六。</p>\n<p>至今已经拿到41个三双，赛季场均三双已成事实，破罗伯特森记录也是指日可待。同时也是NBA史上得分最高的三双。</p>\n<p>但也许会是个悲剧，因为哈登同样出色。就像2005-2006赛季的科比，当年科比以场均35.4分打破了NBA自1970年有纪录以来的最高得分，并且三次入选月最佳球员，轰下单场81分。但由于战绩不佳，最终评委把常规赛MVP给了纳什。</p>\n<p>这个赛季的维斯很像独自带队时的科比，维斯身体素质和得分能力确实厉害，有很强的求胜欲望。能在他身上能找到科比的影子，却始终找不到科比的味道。</p>\n<p><img src=\"http://okzvb3705.bkt.clouddn.com/image.jpg?imageView2/1/w/1980/h/600/\" alt=\"\"></p>\n<h3 id=\"杜兰特\"><a href=\"#杜兰特\" class=\"headerlink\" title=\"杜兰特\"></a>杜兰特</h3><p>场均25.3分，8.2个篮板，4.8次助攻，勇士战绩联盟第一。</p>\n<p>伤病前，还在MVP排行前三，勇士战绩也一直占据联盟第一。个人不是很喜欢杜兰特来勇士，因为压缩了库里的表现。希望这个赛季能夺冠，不然就呵呵了。</p>\n<h3 id=\"詹姆斯\"><a href=\"#詹姆斯\" class=\"headerlink\" title=\"詹姆斯\"></a>詹姆斯</h3><p>场均26.3分，8.5个篮板，8.7次助攻，骑士战绩东部第一。</p>\n<p>数据接近三双，几个赛季前，我就说过詹姆斯已经老了，然后看他这两个赛季的表现来说，并没有。也许不吃猪肉真的能保持好的身体。</p>\n<h3 id=\"库里\"><a href=\"#库里\" class=\"headerlink\" title=\"库里\"></a>库里</h3><p>场均25.3分，4.5个篮板，6.6次助攻，勇士战绩联盟第一。</p>\n<p>相信，库里会是一个最伟大的投手。杜兰特的到来，占用不少球权。相对挤压了部分库里的表现，这个赛季，数据有点缩水。但勇士战绩连续三个赛季联盟第一。</p>\n<h3 id=\"莱昂纳德\"><a href=\"#莱昂纳德\" class=\"headerlink\" title=\"莱昂纳德\"></a>莱昂纳德</h3><p>场均25.7分，5.9个篮板，3.6次助攻，马刺战绩西部第二。</p>\n<p>越是低调的人，越可怕。莱昂纳德一直在成长，有莱昂纳德，马刺还可以再战十年。</p>\n<h3 id=\"伊赛亚-托马斯\"><a href=\"#伊赛亚-托马斯\" class=\"headerlink\" title=\"伊赛亚.托马斯\"></a>伊赛亚.托马斯</h3><p>场均29.1分 2.7个篮板，5.7次助攻，凯尔特人战绩东部第二。</p>\n<p>不愧是地表最强1米75，比1米83的艾弗森更强。很喜欢托马斯，因为他代表我们这类身高的人打篮球，同样可以征服NBA，</p>\n<p>艾弗森也一直是自己的偶像。</p>\n<h3 id=\"约翰-沃尔\"><a href=\"#约翰-沃尔\" class=\"headerlink\" title=\"约翰.沃尔\"></a>约翰.沃尔</h3><p>场均23.2分，4.2个篮板，10.7次助攻，奇才战绩东部第三。</p>\n<p>一直有关注沃尔，就是因为他风驰电掣般的运球速度。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>赛季接近尾声，关于MVP，我认为只剩下三种可能了</p>\n<ol>\n<li>哈登当选，没毛病</li>\n<li>维斯微弱优势当选，评委无法拒绝场均三双不是MVP。</li>\n<li>哈登维斯共同当选</li>\n</ol>\n<p>当然，我对最后是哪种结果都不意外。</p>\n<p>使用到的球员得分数据，来源：<a href=\"http://nba.stats.qq.com/stats/detail/?order=defen&amp;type=player\" target=\"_blank\" rel=\"noopener\">腾讯-NBA数据库</a></p>\n","categories":[],"tags":["nba","mvp","科比"]},{"title":"有效的管理邮件","url":"https://infullstack.github.io/2017/04/06/有效的管理邮件/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/aaron-burden-64849.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<p>邮件，作为工作中很重要的东西。工作多年，有自己使用的一些方法和技巧。最近也参加了一个知乎关于邮件处理的live，总结下关于邮件处理的应该注意的一些心得和技巧，合理的利用这些在短期内提高管理电子邮件的效率。</p>\n<h2 id=\"Zero-Inbox\"><a href=\"#Zero-Inbox\" class=\"headerlink\" title=\"Zero Inbox\"></a>Zero Inbox</h2><p>Zero Inbox，意为零收件箱。对每封邮件做到当天处理，保持收件箱清空状态。</p>\n<p>将立即回复和定时回复结合起来，对重要联系人（客户、领导）发来的邮件，或者包含重要事情的邮件，迅速采取相应的行动。其他邮件，可以在一天中选择固定的时间进行统一处理。</p>\n<p>在结束一天工作时，让收件箱空空如也，保证所有的事情都被处理妥当，这不是一个容易养成的习惯。却是可以带来很大的收获，让每天的工作更严谨效率。</p>\n<h2 id=\"用好过滤器\"><a href=\"#用好过滤器\" class=\"headerlink\" title=\"用好过滤器\"></a>用好过滤器</h2><p>设置邮件规则，在收到或发送一封邮件时，能够指挥邮箱对每封邮件进行一系列的条件判断，再根据预设的动作，对邮件进行处理。自定义常用的规则，达到自己满意的效果。</p>\n<p>过滤器常用的条件包含：</p>\n<ul>\n<li>发件人和收件人是谁</li>\n<li>主题或正文包含什么关键字</li>\n</ul>\n<p>过滤器预设的动作包含：</p>\n<ul>\n<li>转移、自动回复、删除</li>\n<li>标记已读</li>\n<li>打标签</li>\n</ul>\n<h2 id=\"对每封邮件进行4D处理\"><a href=\"#对每封邮件进行4D处理\" class=\"headerlink\" title=\"对每封邮件进行4D处理\"></a>对每封邮件进行4D处理</h2><p>4D指，行动(Do)，转发(Delegate)，搁置(Defer)，删除（Delete）</p>\n<ul>\n<li><p><strong>行动</strong> 当发现邮件内容是由你来完成，且能在短时间内完成，则可以立即采取行动。</p>\n</li>\n<li><p><strong>转发</strong> 当发现邮件有更适合的人去完成，或更低成本的完成的时候，可以选择转发。</p>\n</li>\n<li><p><strong>搁置</strong> 当前有重要事情在做，且该邮件内容不能短时间完成，则可以放入到搁置文件夹中。</p>\n</li>\n<li><p><strong>删除</strong> 可以把通知类邮件，放入 已处理 或 通知 文件夹。</p>\n</li>\n</ul>\n<h2 id=\"写邮件技巧\"><a href=\"#写邮件技巧\" class=\"headerlink\" title=\"写邮件技巧\"></a>写邮件技巧</h2><p>掌握并是用这些技巧，真正言简意赅、目的明确的表达邮件内容，写出高质量的邮件，让收件人处理邮件更为轻松。</p>\n<ul>\n<li><p><strong>邮件模版</strong> 配置常用的邮件模版，比如签名档</p>\n</li>\n<li><p><strong>善于利用标题</strong> 增加&lt;信息&gt; &lt;请求&gt; &lt;行动&gt; &lt;周报&gt; &lt;日报&gt; &lt;培训&gt; &lt;重要&gt;等标注，能突出内容主题</p>\n</li>\n<li><p><strong>长邮件提醒</strong> 对于长邮件，在邮件开头做说明，并提取重要信息阐述</p>\n</li>\n<li><p><strong>长邮件结构清晰</strong> 利用标题、颜色、加粗、序号等方式，清晰表达邮件内容</p>\n</li>\n<li><p><strong>给收件人多种选择</strong> 如果需要收件人采取行动时，可以提供多种选择，避免邮件长时间没得到结果</p>\n</li>\n<li><p><strong>重读邮件</strong> 每次发送前，重复读一下邮件内容，语句通顺，主题明确，逻辑清晰</p>\n</li>\n<li><p><strong>总结行动要点</strong> 如果需要收件人采取行动，告知收件人行动要点。</p>\n</li>\n<li><p><strong>一封邮件一个主题</strong> 尽量一封邮件只说一件事情，或者汇总相关的事情。</p>\n</li>\n</ul>\n<h2 id=\"写好一封邮件\"><a href=\"#写好一封邮件\" class=\"headerlink\" title=\"写好一封邮件\"></a>写好一封邮件</h2><p>ABC法则，是一个邮件的框架，帮助你把信息放在正确的位置，把内容分成三个部分，简述Action、背景Backgroud、结尾Close</p>\n<ul>\n<li><p><strong>简述Action</strong> 简明的阐述行动的目的和关键点、点明前因后果，做到准确明白</p>\n</li>\n<li><p><strong>背景Backgroud</strong> 清楚、简洁、相关</p>\n</li>\n<li><p><strong>结尾Close</strong> 阐述下一步行动和小提示、签名</p>\n</li>\n</ul>\n<p>示例：<br><img src=\"http://okzvb3705.bkt.clouddn.com/91a1d4d90eaf4e6c130868d3e7175027_b.jpg\" alt=\"\"></p>\n<p>写邮件跟写博客文章一样，需要经常总结和应用合适的方法和技巧，不日之后，即可顺手拈来。</p>\n<p>本文内容多为网上关于邮件管理的经验之谈，这里做一个适合自己的邮件管理的汇总笔记。</p>\n","categories":[],"tags":["邮件","管理"]},{"title":"读阿里开发手册","url":"https://infullstack.github.io/2017/03/10/【笔记】阿里开发手册/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/galymzhan-abdugalimov-181.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>阿里作为全世界Java开发规模最大和应用水平最高的地方之一，三十几页的规范，从编程、异常日志、SQL、工程、安全五块形成的规约总结，根据约束力，分强制、推荐、参考三大类，可以作为优秀技术团队的重要利器。</p>\n<p><strong>官方文档地址：<a href=\"https://yq.aliyun.com/articles/69327?utm_content=m_10088\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/69327?utm_content=m_10088</a></strong></p>\n<p>以下是阅读阿里开发手册中，记录的一些重要摘要信息。</p>\n<h2 id=\"编程规范\"><a href=\"#编程规范\" class=\"headerlink\" title=\"编程规范\"></a>编程规范</h2><h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><ol>\n<li>尽量语义清晰、望名知义</li>\n<li>遵从驼峰形式</li>\n<li>如果使用到了设计模式，类名体现具体模式</li>\n</ol>\n<h3 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h3><ol>\n<li>值定义不要出现未定义的常量</li>\n<li>常量类推荐也分类定义常量类，不要大而全的一个常量类</li>\n<li>变量值在一定范围，使用Enum类</li>\n</ol>\n<h3 id=\"格式规约\"><a href=\"#格式规约\" class=\"headerlink\" title=\"格式规约\"></a>格式规约</h3><ol>\n<li>单行限制不超过120个字符</li>\n</ol>\n<p>看注释内容，示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t// 缩进4个空格</span><br><span class=\"line\">\tString say = &quot;hello&quot;;</span><br><span class=\"line\">\t// 运算符的左右必须有一个空格</span><br><span class=\"line\">\tint flag = 0;</span><br><span class=\"line\">\t// 关键词if与括号之间必须有一个空格，括号内的f与左括号，0与右括号不需要空格</span><br><span class=\"line\">\tif (flag == 0) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(say);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 左大括号前加空格且不换行；左大括号后换行</span><br><span class=\"line\">\tif (flag == 1) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;world&quot;);</span><br><span class=\"line\">\t\t// 右大括号前换行，右大括号后有else，不用换行</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;ok&quot;);</span><br><span class=\"line\">\t\t// 在右大括号后直接结束，则必须换行</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"OOP规约\"><a href=\"#OOP规约\" class=\"headerlink\" title=\"OOP规约\"></a>OOP规约</h3><ol>\n<li>overwrite方法，必须有@overwrite注解</li>\n<li>静态方法和变量，直接通过类名访问，禁止对象访问，增加无谓的编译器解释成本</li>\n<li>不能使用过时的类或方法</li>\n<li>包装类之间的值比较，使用equals方法</li>\n<li><strong>构造方法禁止加入任何业务逻辑，请放在init方法中</strong></li>\n<li>String的split方法，做分隔符后无内容的检测</li>\n<li>类方法定义的顺序，公有方法或保护方法 &gt; 私有方法 &gt; getter/setter方法</li>\n<li>getter/setter方法尽量不要加入任何业务逻辑，增加排查问题的难度</li>\n<li>推荐使用StringBuilder的append方法替换string拼接</li>\n</ol>\n<h3 id=\"集合处理\"><a href=\"#集合处理\" class=\"headerlink\" title=\"集合处理\"></a>集合处理</h3><h3 id=\"并发处理\"><a href=\"#并发处理\" class=\"headerlink\" title=\"并发处理\"></a>并发处理</h3><ol>\n<li>线程定义名称</li>\n<li>使用线程池，使用ThreadPoolExecutor</li>\n<li>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</li>\n<li>使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法可以执行，避免主线程无法执行至await方法，直到超时才返回结果。</li>\n</ol>\n<h3 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h3><p>1.推荐尽量少用else， if-else的方式可以改写成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (condition) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 接着写else的业务逻辑代码;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>a</li>\n</ol>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ol>\n<li>类、属性、方法，使用/<em>*内容</em>/定义注释，不得使用//注释</li>\n<li>抽象方法、枚举，详细注释</li>\n<li>注释掉的代码，配合说明</li>\n</ol>\n<h2 id=\"异常日志\"><a href=\"#异常日志\" class=\"headerlink\" title=\"异常日志\"></a>异常日志</h2><h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><ol>\n<li>RuntimeException预先检查进行规避，避免IndexOutofBoundsException/NullPointerException</li>\n<li>异常不能用来做流程控制、条件控制，比条件判断效率低</li>\n<li>finally需要关闭资源、流、连接等</li>\n<li>避免出现重复代码</li>\n</ol>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><ol>\n<li>使用SLF4J日志框架的API，不直接使用log4j/logback</li>\n<li>日志文件命名，含义清晰</li>\n<li><p>异常信息，包含现场信息和堆栈信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.error(各类参数或者对象toString + &quot;_&quot; + e.getMessage(), e);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用条件输出或占位输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：（条件）</span><br><span class=\"line\">if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">    logger.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正例：（占位符）</span><br><span class=\"line\">logger.debug(&quot;Processing trade with id: &#123;&#125; symbol : &#123;&#125; &quot;, id, symbol);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL规约中，MySQL使用方法都是比较有用的经验之选，推荐都仔细研读。</p>\n<p>###　建表</p>\n<ol>\n<li>使用小写字母，数字，下划线命名</li>\n<li>尽量不修改表名、字段名</li>\n<li>主键pk<em> ,索引 idx</em> ,唯一 uk_</li>\n<li>小数类型为decimal，禁止使用float和double。</li>\n<li>如果存储的字符串长度几乎相等，使用char定长字符串类型</li>\n</ol>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ol>\n<li>join字段类型一致、禁止超过3表join</li>\n<li>在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。 说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为20的索引，区分度会高达90%以上，可以使用count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</li>\n<li>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。右模糊可以利用b+树最左前缀匹配</li>\n<li>利用延迟关联或者子查询优化超多分页场景。 说明：MySQL并不是跳过offset行，而是取offset+N行，然后返回放弃前offset行，返回N行，那当offset特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行SQL改写。 正例：先快速定位需要获取的id段，然后再关联： SELECT a.* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</li>\n</ol>\n<h3 id=\"SQL规约\"><a href=\"#SQL规约\" class=\"headerlink\" title=\"SQL规约\"></a>SQL规约</h3><ol>\n<li>【强制】不要使用count(列名)或count(常量)来替代count(<em>)，count(</em>)是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。 说明：count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。</li>\n<li>【强制】count(distinct col) 计算该列除NULL之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。</li>\n<li>【强制】当某一列的值全是NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题。</li>\n</ol>\n<h3 id=\"ORM规约\"><a href=\"#ORM规约\" class=\"headerlink\" title=\"ORM规约\"></a>ORM规约</h3><ol>\n<li>在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</li>\n<li>@Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</li>\n</ol>\n<h2 id=\"工程规约\"><a href=\"#工程规约\" class=\"headerlink\" title=\"工程规约\"></a>工程规约</h2><h3 id=\"应用分层\"><a href=\"#应用分层\" class=\"headerlink\" title=\"应用分层\"></a>应用分层</h3><p><a href=\"http://infullstack.com/?attachment_id=242\" rel=\"noopener\" target=\"_blank\"><img src=\"http://infullstack.com/wp-content/uploads/2017/03/微信图片_20170310171602.png\" alt=\"\" width=\"400\" height=\"345\" class=\"aligncenter size-full wp-image-242\"></a></p>\n<p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web层，也可以直接依赖于Service层，依此类推：</p>\n<ul>\n<li>开放接口层：可直接封装Service方法暴露成RPC接口；通过Web封装成http接口；进行网关安全控制、流量控制等。</li>\n<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示等。</li>\n<li>Web层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>\n<li>Service层：相对具体的业务逻辑服务层。</li>\n<li>Manager层：通用业务处理层，它有如下特征： 1） 对第三方平台封装的层，预处理返回结果及转化异常信息； 2） 对Service层通用能力的下沉，如缓存方案、中间件通用处理； 3） 与DAO层交互，对多个DAO的组合复用。</li>\n<li>DAO层：数据访问层，与底层MySQL、Oracle、Hbase进行数据交互。</li>\n<li>外部接口或第三方平台：包括其它部门RPC开放接口，基础平台，其它公司的HTTP接口。</li>\n</ul>\n<h3 id=\"服务器规约\"><a href=\"#服务器规约\" class=\"headerlink\" title=\"服务器规约\"></a>服务器规约</h3><ol>\n<li>给JVM设置-XX:+HeapDumpOnOutOfMemoryError参数，让JVM碰到OOM场景时输出dump信息。</li>\n<li>高并发服务器建议调小TCP协议的time_wait超时时间。</li>\n</ol>\n<h2 id=\"安全规约\"><a href=\"#安全规约\" class=\"headerlink\" title=\"安全规约\"></a>安全规约</h2><p>用户请求传入的任何参数必须做有效性验证。 说明：忽略参数校验可能导致：</p>\n<ul>\n<li>page size过大导致内存溢出</li>\n<li>恶意order by导致数据库慢查询</li>\n<li>任意重定向</li>\n<li>SQL注入</li>\n<li>反序列化注入</li>\n<li>正则输入源串拒绝服务ReDoS</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"分层领域模型规约\"><a href=\"#分层领域模型规约\" class=\"headerlink\" title=\"分层领域模型规约\"></a>分层领域模型规约</h3><ul>\n<li><strong>DO（Data Object）</strong>：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li>\n<li><strong>DTO（Data Transfer Object）</strong>：数据传输对象，Service和Manager向外传输的对象。</li>\n<li><strong>BO（Business Object）</strong>：业务对象。可以由Service层输出的封装业务逻辑的对象。</li>\n<li><strong>QUERY</strong>：数据查询对象，各层接收上层的查询请求。注：超过2个参数的查询封装，禁止使用Map类来传输。</li>\n<li><strong>VO（View Object）</strong>：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li>\n</ul>\n<h3 id=\"专有名词\"><a href=\"#专有名词\" class=\"headerlink\" title=\"专有名词\"></a>专有名词</h3><ol>\n<li><strong>POJO</strong>（Plain Ordinary Java Object）：在本规约中，POJO专指只有setter/getter/toString的简单类，包括DO/DTO/BO/VO等。 </li>\n<li><strong>DO</strong>（Data Object）：本手册指数据库表一一对应的POJO类。 </li>\n<li><strong>GAV</strong>（GroupId、ArtifactctId、Version）：Maven坐标，是用来唯一标识jar包。 </li>\n<li><strong>OOP</strong>（Object Oriented Programming）: 本手册泛指类、对象的编程处理方式。 </li>\n<li><strong>ORM</strong>（Object Relation Mapping）: 对象关系映射，对象领域模型与底层数据之间的转换，本文泛指iBATIS, mybatis等框架。 </li>\n<li><strong>NPE</strong>（java.lang.NullPointerException）: 空指针异常。 </li>\n<li><strong>一方库</strong>：本工程内部子项目模块依赖的库（jar包）。 </li>\n<li><strong>二方库</strong>：公司内部发布到中央仓库，可供公司内部依赖的库（jar包）。 </li>\n<li><strong>三方库</strong>：公司之外的开源的依赖库（jar包）</li>\n</ol>\n<p><strong>官方文档地址：<a href=\"https://yq.aliyun.com/articles/69327?utm_content=m_10088\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/69327?utm_content=m_10088</a></strong></p>\n","categories":[],"tags":["java","阿里","规范"]},{"title":"shell通用日志函数","url":"https://infullstack.github.io/2017/01/11/shell通用日志函数/","content":"<p>为了方便调试，写了一个通用的日志函数，实现功能：</p>\n<ol>\n<li>设定日志级别，实现可以输出不同级别的日志信息 </li>\n<li>日志格式类似为：[日志级别] 时间 funcname:函数名 [lineno:行号] 日志信息 </li>\n<li>不同级别，设定不同颜色 </li>\n</ol>\n<p><strong>代码:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log &#123;</span><br><span class=\"line\">    local text;local logtype</span><br><span class=\"line\">    logfile=/var/log/mylog/mylog.log</span><br><span class=\"line\">    logtype=$1</span><br><span class=\"line\">    text=$2</span><br><span class=\"line\">\tmessage=&quot;`date +&apos;%F %H:%M:%S&apos;` $1 line:$LINENO $2&quot;</span><br><span class=\"line\">    case $logtype in </span><br><span class=\"line\">        error)</span><br><span class=\"line\">            echo -e &quot;\\033[31m$&#123;message&#125;\\033[0m&quot; | tee -a $logfile;;</span><br><span class=\"line\">        info)</span><br><span class=\"line\">            echo -e &quot;\\033[32m$&#123;message&#125;\\033[0m&quot; | tee -a $logfile;;</span><br><span class=\"line\">        warn)</span><br><span class=\"line\">            echo -e &quot;\\033[33m$&#123;message&#125;\\033[0m&quot; | tee -a $logfile;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log info &quot;this&apos;s info log&quot;</span><br><span class=\"line\">log error &quot;this&apos;s error log&quot;</span><br><span class=\"line\">log warn &quot;this&apos;s warn log&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>注:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local : 局部变量</span><br><span class=\"line\">$LINENO：shell 脚本行数</span><br><span class=\"line\">$1 $2 ：函数参数</span><br><span class=\"line\">tee 输出到控制台和文件</span><br><span class=\"line\">\\033[31m \\033[0m : echo 输出颜色</span><br></pre></td></tr></table></figure>","categories":[],"tags":["shell","日志","log"]},{"title":"nginx负载均衡","url":"https://infullstack.github.io/2017/01/03/nginx负载均衡/","content":"<p>nginx可以按照调度规则实现动态、静态页面的分离，也可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。</p>\n<p>nginx的upstream目前支持的5种方式的分配</p>\n<p><strong>1.轮询（默认）</strong></p>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server 192.168.0.14; </span><br><span class=\"line\">    server 192.168.0.15; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.指定权重</strong></p>\n<p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server 192.168.0.14 weight=10; </span><br><span class=\"line\">    server 192.168.0.15 weight=10; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.IP绑定 ip_hash (session绑定)</strong></p>\n<p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    ip_hash; </span><br><span class=\"line\">    server 192.168.0.14:88; </span><br><span class=\"line\">    server 192.168.0.15:80; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4.fair（第三方）</strong></p>\n<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server server1; </span><br><span class=\"line\">    server server2; </span><br><span class=\"line\">    fair; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5.url_hash（第三方）</strong></p>\n<p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server squid1:3128; </span><br><span class=\"line\">    server squid2:3128; </span><br><span class=\"line\">    hash $request_uri; </span><br><span class=\"line\">    hash_method crc32; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在需要使用负载均衡的server中增加<br>示例配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http://backserver/; </span><br><span class=\"line\">upstream backserver&#123; </span><br><span class=\"line\">    ip_hash; </span><br><span class=\"line\">    server 127.0.0.1:9090 down; (down 表示单前的server暂时不参与负载) </span><br><span class=\"line\">    server 127.0.0.1:8080 weight=2; (weight 默认为1.weight越大，负载的权重就越大) </span><br><span class=\"line\">    server 127.0.0.1:6060; </span><br><span class=\"line\">    server 127.0.0.1:7070 backup; (其它所有的非backup机器down或者忙的时候，请求backup机器) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误</span><br><span class=\"line\">fail_timeout:max_fails次失败后，暂停的时间</span><br></pre></td></tr></table></figure>","categories":[],"tags":["nginx","负载均衡"]},{"title":"JFinal增加简单权限认证功能","url":"https://infullstack.github.io/2017/01/03/JFinal增加简单权限认证功能/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/maja-petric-8287.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<h2 id=\"JFinal\"><a href=\"#JFinal\" class=\"headerlink\" title=\"JFinal\"></a>JFinal</h2><p>JFinal 是基于 Java 语言的极速 WEB + ORM 框架，其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful。在拥有Java语言所有优势的同时再拥有ruby、python、php等动态语言的开发效率！</p>\n<p>基于JFinal有shiro权限认证模块。这里使用interceptor和session实现简单的权限认证功能。</p>\n<h2 id=\"Interceptor\"><a href=\"#Interceptor\" class=\"headerlink\" title=\"Interceptor\"></a>Interceptor</h2><p>每个action请求，都会校验session中是否登录成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CommonInterceptor implements Interceptor &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static List&lt;String&gt; noLoginAction;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic CommonInterceptor() &#123;</span><br><span class=\"line\">\t\tnoLoginAction = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tnoLoginAction.add(&quot;/login&quot;);</span><br><span class=\"line\">\t\tnoLoginAction.add(&quot;/doLogin&quot;);</span><br><span class=\"line\">\t\tnoLoginAction.add(&quot;/logout&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void intercept(Invocation inv) &#123;</span><br><span class=\"line\">\t\tController controller = inv.getController();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tHttpSession session = controller.getSession();</span><br><span class=\"line\">\t\t\tboolean flag = (boolean) (session.getAttribute(&quot;islogin&quot;) != null ? session.getAttribute(&quot;islogin&quot;): false);</span><br><span class=\"line\">\t\t\tif (flag) &#123;</span><br><span class=\"line\">\t\t\t\t// 登录后调整到首页，不进入login页面</span><br><span class=\"line\">\t\t\t\tif (IndexController.LOGIN_URL.equals(inv.getActionKey())) &#123;</span><br><span class=\"line\">\t\t\t\t\tcontroller.redirect(IndexController.LOGIN_SUCCESS_URL);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tinv.invoke();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; else if (noLoginAction.contains(inv.getActionKey())) &#123;</span><br><span class=\"line\">\t\t\t\tinv.invoke();</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tcontroller.redirect(IndexController.LOGIN_URL);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\tcontroller.redirect(&quot;/&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h2><p>登录时判断用户和密码是否匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void login() &#123;</span><br><span class=\"line\">\tthis.render(&quot;/auth/login.html&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void doLogin() &#123;\t</span><br><span class=\"line\">\tString username = this.getPara(&quot;username&quot;);</span><br><span class=\"line\">\tString password = this.getPara(&quot;password&quot;);</span><br><span class=\"line\">\tif (&quot;admin&quot;.equals(username) &amp;&amp; password.equals(&quot;admin&quot;)) &#123;</span><br><span class=\"line\">\t\tsetSessionAttr(&quot;islogin&quot;, true);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.redirect(&quot;/&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public void logout() &#123;</span><br><span class=\"line\">\tsetSessionAttr(&quot;islogin&quot;, false);</span><br><span class=\"line\">\tthis.redirect(LOGIN_URL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>在Config中增加Interceptor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 配置全局拦截器</span><br><span class=\"line\">*/</span><br><span class=\"line\">public void configInterceptor(Interceptors me) &#123;</span><br><span class=\"line\">\tme.add(new CommonInterceptor());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":["jfinal","认证","权限"]},{"title":"Nginx+Tomcat实现应用负载均衡","url":"https://infullstack.github.io/2016/12/30/Nginx-Tomcat实现应用负载均衡/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>当单个应用服务器压力过大时，可以使用多个应用服务器提供服务减轻单服务器的压力，再结合一个代理转发服务器，完成tomcat的负载均衡。</p>\n<p>部署架构图<br><img src=\"http://infullstack.com/wp-content/uploads/2016/12/nginx_tomcat.png\" alt=\"\" width=\"500\" class=\"aligncenter size-full wp-image-100\"></p>\n<p>特点：<br>当请求达到nginx，nginx会根据weight和配置的服务器列表，完成请求的转发，实现应用服务器的负载均衡。<br>该架构适用于无状态共享的应用服务，因为session并没有设置共享。</p>\n<h3 id=\"用到工具\"><a href=\"#用到工具\" class=\"headerlink\" title=\"用到工具\"></a>用到工具</h3><ul>\n<li>nginx 1.10</li>\n<li>tomcat 1.8</li>\n</ul>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p><em>三个节点</em></p>\n<ul>\n<li>172.16.2.41 Tomcat  tomcat_41</li>\n<li>172.16.2.42 Tomcat  tomcat_42</li>\n<li>172.16.2.43 Nginx   nginx_43</li>\n</ul>\n<h2 id=\"配置tomcat\"><a href=\"#配置tomcat\" class=\"headerlink\" title=\"配置tomcat\"></a>配置tomcat</h2><h3 id=\"配置端口-conf-server-xml\"><a href=\"#配置端口-conf-server-xml\" class=\"headerlink\" title=\"配置端口(conf/server.xml)\"></a>配置端口(conf/server.xml)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;1010&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">               connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新增首页\"><a href=\"#新增首页\" class=\"headerlink\" title=\"新增首页\"></a>新增首页</h3><p>新增应用服务器首页，tomcat/webapps/ROOT/index.html</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@bigdata01 ROOT]<span class=\"comment\"># echo 'tomcat at 41 !' &gt; index.html</span></span><br><span class=\"line\">[root@bigdata01 ROOT]<span class=\"comment\"># cat index.html </span></span><br><span class=\"line\">tomcat at 41 !</span><br><span class=\"line\">[root@bigdata01 ROOT]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动tomcat\"><a href=\"#启动tomcat\" class=\"headerlink\" title=\"启动tomcat\"></a>启动tomcat</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@transwarp1 bin]<span class=\"comment\"># ./startup.sh </span></span><br><span class=\"line\">Using CATALINA_BASE:   /mnt/disk1/ray/tomcat</span><br><span class=\"line\">Using CATALINA_HOME:   /mnt/disk1/ray/tomcat</span><br><span class=\"line\">Using CATALINA_TMPDIR: /mnt/disk1/ray/tomcat/temp</span><br><span class=\"line\">Using JRE_HOME:        /usr/java/latest</span><br><span class=\"line\">Using CLASSPATH:       /mnt/disk1/ray/tomcat/bin/bootstrap.jar:/mnt/disk1/ray/tomcat/bin/tomcat-juli.jar</span><br><span class=\"line\">Tomcat started.</span><br><span class=\"line\">[root@transwarp1 bin]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置tomcat2\"><a href=\"#配置tomcat2\" class=\"headerlink\" title=\"配置tomcat2\"></a>配置tomcat2</h3><p>方法同上。</p>\n<h2 id=\"部署Nginx\"><a href=\"#部署Nginx\" class=\"headerlink\" title=\"部署Nginx\"></a>部署Nginx</h2><h2 id=\"Nginx-安装\"><a href=\"#Nginx-安装\" class=\"headerlink\" title=\"Nginx 安装\"></a>Nginx 安装</h2><p>参考文章：<a href=\"http://www.runoob.com/linux/nginx-install-setup.html\" target=\"_blank\" rel=\"noopener\">Nginx 安装配置</a></p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream infullstack.com&#123;  #集群名称</span><br><span class=\"line\">\t    server\t172.16.2.41:1010\tweight=1;# 服务器列表，请求会转发到这些服务器</span><br><span class=\"line\">\t    server\t172.16.2.42:1010\tweight=2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       88;  # nginx端口</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass\thttp://infullstack.com; #集群名称</span><br><span class=\"line\">            proxy_redirect\tdefault;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动和访问Nginx\"><a href=\"#启动和访问Nginx\" class=\"headerlink\" title=\"启动和访问Nginx\"></a>启动和访问Nginx</h2><p>访问<a href=\"http://172.16.2.43:88/\" target=\"_blank\" rel=\"noopener\">http://172.16.2.43:88/</a></p>\n<p>刷新页面，会发现请求会转发到41和42服务器</p>\n<p><img src=\"http://infullstack.com/wp-content/uploads/2016/12/41.png\" alt=\"\" width=\"505\" height=\"142\" class=\"alignnone size-full wp-image-101\"><br><img src=\"http://infullstack.com/wp-content/uploads/2016/12/42.png\" alt=\"\" width=\"586\" height=\"189\" class=\"alignnone size-full wp-image-102\"></p>\n<p>根据应用服务器的配置和需求，可以修改weight，配置服务器的权重。</p>\n","categories":[],"tags":["nginx","tomcat","负载均衡"]},{"title":"实现shell并发","url":"https://infullstack.github.io/2016/12/09/实现shell并发/","content":"<p>经常在工作中遇到执行的脚本需要并发执行，提高效率。</p>\n<ul>\n<li>常规脚本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!bin/sh</span><br><span class=\"line\">for((i=1;i&lt;=5;i++));do</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sleep 3;</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>执行：time bash test.sh<br>执行结果：总共耗时15秒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@pc disk1]# time sh test.sh</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m15.010s</span><br><span class=\"line\">user\t0m0.003s</span><br><span class=\"line\">sys\t0m0.005s</span><br><span class=\"line\">[root@pc disk1]#</span><br></pre></td></tr></table></figure>\n<ul>\n<li>并发脚本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!bin/sh</span><br><span class=\"line\">for((i=1;i&lt;=5;i++));do</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sleep 3;</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">&#125;&amp;</span><br><span class=\"line\">done</span><br><span class=\"line\">wait</span><br><span class=\"line\">echo &apos;over&apos;</span><br></pre></td></tr></table></figure>\n<p>每次for循环后加了一个后台执行&amp;符号，那5个循环任务会并发执行,执行：time bash concurrent.sh<br>执行结果：总耗时3秒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@pc disk1]# time sh concurrent.sh </span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">over</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m3.004s</span><br><span class=\"line\">user\t0m0.001s</span><br><span class=\"line\">sys\t0m0.002s</span><br><span class=\"line\">[root@pc disk1]#</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wait的作用：等待前面后台执行的任务全部结束再往下执行，否则程序会直接执行结束。当然后台执行的脚本还会继续执行，只不过会影响wait后续的代码。</p>\n</blockquote>\n","categories":[],"tags":["shell","并发"]},{"title":"Linux配置supervisor管理进程","url":"https://infullstack.github.io/2016/12/09/Linux配置supervisor管理进程/","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Supervisor是由python语言编写，基于linux操作系统的一款服务器管理工具，<br>用以监控服务器的运行，发现问题能立即自动预警及自动重启等功能。</p>\n<h3 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h3><ul>\n<li>Centos 6.5</li>\n<li>Python 2.6.6</li>\n</ul>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><ul>\n<li>supervisor</li>\n<li>meld(python html模版引擎)</li>\n</ul>\n<p>下载地址：</p>\n<p>meld3 <a href=\"http://www.plope.com/software/meld3/meld3-0.6.5.tar.gz\" target=\"_blank\" rel=\"noopener\">http://www.plope.com/software/meld3/meld3-0.6.5.tar.gz</a></p>\n<p>supervisor</p>\n<p><a href=\"http://pypi.python.org/packages/source/s/supervisor/supervisor-3.0b1.tar.gz\" target=\"_blank\" rel=\"noopener\">http://pypi.python.org/packages/source/s/supervisor/supervisor-3.0b1.tar.gz</a></p>\n<p>下载解压，分别执行python setup.py install安装</p>\n<h3 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h3><ol>\n<li>创建配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 增加web监控服务</span><br><span class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">port=0.0.0.0:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">username=user              ; (default is no username (open server))</span><br><span class=\"line\">password=123               ; (default is no password (open server))</span><br><span class=\"line\"></span><br><span class=\"line\"># 增加监控程序</span><br><span class=\"line\">[program:tail1]                                                                            </span><br><span class=\"line\">command=tail -f  /etc/supervisord.conf   ;常驻后台的命令</span><br><span class=\"line\">autostart=true                           ;是否随supervisor启动</span><br><span class=\"line\">autorestart=true                         ;是否在挂了之后重启，意外关闭后会重启，比如kill掉！</span><br><span class=\"line\">startretries=3                           ;启动尝试次数</span><br><span class=\"line\">stderr_logfile=/tmp/tail1.err.log        ;标准输出的位置</span><br><span class=\"line\">stdout_logfile=/tmp/tail1.out.log        ;标准错误输出的位置</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以监控目录下配置文件，监控/etc/supervisord.d/目录下conf后缀文件，conf中配置监控程序</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动监控\"><a href=\"#启动监控\" class=\"headerlink\" title=\"启动监控\"></a>启动监控</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n<p>访问浏览器ip:9001</p>\n<p><img src=\"http://infullstack.com/wp-content/uploads/2016/12/supervisor.png\" alt=\"\"></p>\n<h3 id=\"supervisorctl管理程序进程\"><a href=\"#supervisorctl管理程序进程\" class=\"headerlink\" title=\"supervisorctl管理程序进程\"></a>supervisorctl管理程序进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询状态</span><br><span class=\"line\">upervisorctl status        </span><br><span class=\"line\"># 开启服务</span><br><span class=\"line\">supervisorctl start hello    </span><br><span class=\"line\"># 关闭服务</span><br><span class=\"line\">supervisorctl stop hello</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是programname</span><br><span class=\"line\">supervisorctl stop programname</span><br><span class=\"line\"># 启动某个进程</span><br><span class=\"line\">supervisorctl start programname</span><br><span class=\"line\"># 重启某个进程</span><br><span class=\"line\">supervisorctl restart programname</span><br><span class=\"line\"># 重启所有属于名为groupworker这个分组的进程(start,restart同理)</span><br><span class=\"line\">supervisorctl stop groupworker</span><br><span class=\"line\"># 停止全部进程，注：start、restart、stop都不会载入最新的配置文件</span><br><span class=\"line\">supervisorctl stop all</span><br><span class=\"line\"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br><span class=\"line\">supervisorctl reload</span><br><span class=\"line\">根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br><span class=\"line\">supervisorctl update，</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加程序启动停止脚本\"><a href=\"#增加程序启动停止脚本\" class=\"headerlink\" title=\"增加程序启动停止脚本\"></a>增加程序启动停止脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># /etc/init.d/supervisord</span><br><span class=\"line\">#</span><br><span class=\"line\"># Supervisor is a client/server system that</span><br><span class=\"line\"># allows its users to monitor and control a</span><br><span class=\"line\"># number of processes on UNIX-like operating</span><br><span class=\"line\"># systems.</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: - 64 36</span><br><span class=\"line\"># description: Supervisor Server</span><br><span class=\"line\"># processname: supervisord</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source init functions</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\">prog=&quot;supervisord&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">prefix=&quot;/usr&quot;</span><br><span class=\"line\">exec_prefix=&quot;$&#123;prefix&#125;&quot;</span><br><span class=\"line\">prog_bin=&quot;$&#123;exec_prefix&#125;/bin/supervisord&quot;</span><br><span class=\"line\">PIDFILE=&quot;/var/run/$prog.pid&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">       ###注意下面这一行一定得有-c /etc/supervisord.conf   不然修改了配置文件根本不生效！</span><br><span class=\"line\">       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE</span><br><span class=\"line\">       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;</span><br><span class=\"line\">       echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">stop()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       echo -n $&quot;Shutting down $prog: &quot;</span><br><span class=\"line\">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;</span><br><span class=\"line\">       echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\"> </span><br><span class=\"line\"> start)</span><br><span class=\"line\">   start</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> stop)</span><br><span class=\"line\">   stop</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> status)</span><br><span class=\"line\">       status $prog</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> restart)</span><br><span class=\"line\">   stop</span><br><span class=\"line\">   start</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> *)</span><br><span class=\"line\">   echo &quot;Usage: $0 &#123;start|stop|restart|status&#125;&quot;</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>然后加入启动项呗</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/supervisord</span><br><span class=\"line\">chkconfig --add supervisord</span><br><span class=\"line\">chkconfig supervisord on</span><br><span class=\"line\">service supervisord start</span><br></pre></td></tr></table></figure>\n<p>这样可以通过/etc/init.d/supervisord start | stop |restart 来管理supervisord</p>\n<p>参考内容：<a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">http://supervisord.org/</a></p>\n<h3 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Flume为数据采集工具，但缺乏监控工具，Flume进程的状态不能实时看到，且进程停止不回自动重启，可以利用Supervisor来完成这些工作。</p>\n<h3 id=\"安装配置Supervisor\"><a href=\"#安装配置Supervisor\" class=\"headerlink\" title=\"安装配置Supervisor\"></a>安装配置Supervisor</h3><p>参考文章 <a href=\"http://infullstack.com/linux_supervisor.html\" target=\"_blank\" rel=\"noopener\">http://infullstack.com/linux_supervisor.html</a></p>\n<h3 id=\"配置-etc-supervisord-conf\"><a href=\"#配置-etc-supervisord-conf\" class=\"headerlink\" title=\"配置/etc/supervisord.conf\"></a>配置/etc/supervisord.conf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:flume] </span><br><span class=\"line\">command=sh /usr/lib/flume/bin/flume-ng agent --conf /usr/lib/flume/conf/ -f /usr/lib/flume/conf/flume.conf -n agent1 -Dflume.root.logger=INFO,console</span><br><span class=\"line\">autostart=true                           ;是否随supervisor启动</span><br><span class=\"line\">autorestart=true                         ;是否在挂了之后重启，意外关闭后会重启，比如kill掉！</span><br><span class=\"line\">startretries=3                           ;启动尝试次数</span><br><span class=\"line\">stderr_logfile=/tmp/flume.err.log        ;标准输出的位置</span><br><span class=\"line\">stdout_logfile=/tmp/flume.out.log        ;标准错误输出的位置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以监控目录下配置文件，监控/etc/supervisord.d/目录下conf后缀文件，conf文件中配置监控上述内容</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>程序不需要提前启动，supervisor启动的时候会启动Flume</p>\n","categories":[],"tags":["linux","supervisor"]},{"title":"收集jmap和jstack信息","url":"https://infullstack.github.io/2016/12/05/收集jmap和jstack信息/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#收集jmap信息</span><br><span class=\"line\"></span><br><span class=\"line\">#!bin/sh</span><br><span class=\"line\">if [ $# -lt 2 ] ; then</span><br><span class=\"line\">\techo &quot;please input port and execute count parameter&quot;</span><br><span class=\"line\">\texit</span><br><span class=\"line\">fi</span><br><span class=\"line\">jmap_dir=/mnt/ray/jmap/</span><br><span class=\"line\">jstack_dir=/mnt/ray/jstack/</span><br><span class=\"line\">port=$1</span><br><span class=\"line\">count=$2</span><br><span class=\"line\">i=1</span><br><span class=\"line\">while(($i&lt;$count))</span><br><span class=\"line\">do</span><br><span class=\"line\">\tfilename=`date &apos;+%Y-%m-%d_%H:%M:%S&apos;`</span><br><span class=\"line\">\tsudo -u hive /usr/java/latest/bin/jmap -histo $port  &gt; $jmap_dir$filename&quot;_&quot;$port.jmap</span><br><span class=\"line\">        sudo -u hive /usr/java/latest/bin/jmap -heap $port  &gt;&gt; $jmap_dir$filename&quot;_&quot;$port.jmap</span><br><span class=\"line\">\tsudo -u hive /usr/java/latest/bin/jstack $port &gt; $jstack_dir$filename&quot;_&quot;$port.jstack</span><br><span class=\"line\">\ti=$(($i+1))</span><br><span class=\"line\">\tsleep 1m</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#收集jstack信息</span><br><span class=\"line\">#!bin/sh</span><br><span class=\"line\">jmap_dir=/mnt/ray/jmap/</span><br><span class=\"line\">jstack_dir=/mnt/ray/jstack/</span><br><span class=\"line\">count=$1</span><br><span class=\"line\">i=1</span><br><span class=\"line\">mkdir /mnt/ray/jmap/</span><br><span class=\"line\">mkdir /mnt/ray/jstack/</span><br><span class=\"line\">while(($i&lt;$count))</span><br><span class=\"line\">do</span><br><span class=\"line\">\tfor port in $(jps|grep CoarseGrainedExecutorBackend|awk &apos;&#123;print $1&#125;&apos;)</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\tfilename=`date &apos;+%Y-%m-%d_%H:%M:%S&apos;`</span><br><span class=\"line\">\t\tsudo -u hive /usr/java/latest/bin/jmap -histo $port &gt; $jmap_dir$filename&quot;_&quot;$port.jmap</span><br><span class=\"line\">   sudo -u hive /usr/java/latest/bin/jmap -heap $port &gt;&gt; $jmap_dir$filename&quot;_&quot;$port.jmap</span><br><span class=\"line\">\t\tsudo -u hive /usr/java/latest/bin/jstack $port &gt; $jstack_dir$filename&quot;_&quot;$port.jstack</span><br><span class=\"line\">\t\ti=$(($i+1))</span><br><span class=\"line\">\t\tsleep 1m</span><br><span class=\"line\">\tdone\t</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh jmap.sh 16019 &amp;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["java","jmap","jstack"]},{"title":"书单","url":"https://infullstack.github.io/2016/09/08/书单/","content":"","categories":[],"tags":["书"]},{"title":"常用的linux命令","url":"https://infullstack.github.io/2016/01/03/常用的10条linux命令/","content":"<h4 id=\"Linux-kill多个进程\"><a href=\"#Linux-kill多个进程\" class=\"headerlink\" title=\"Linux kill多个进程\"></a>Linux kill多个进程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef|grep ycsb|grep -v grep|cut -c 9-15|xargs kill -9</span><br></pre></td></tr></table></figure>\n<h4 id=\"列举根目录文件下文件大小\"><a href=\"#列举根目录文件下文件大小\" class=\"headerlink\" title=\"列举根目录文件下文件大小\"></a>列举根目录文件下文件大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du / -m --max-depth 1 |sort -nr</span><br></pre></td></tr></table></figure>\n<p>####　查看端口占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat　-anp|grep port</span><br><span class=\"line\">即：netstat –apn | grep 8080</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找文件内容\"><a href=\"#查找文件内容\" class=\"headerlink\" title=\"查找文件内容\"></a>查找文件内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用混合查找方式查找文件\"><a href=\"#使用混合查找方式查找文件\" class=\"headerlink\" title=\"使用混合查找方式查找文件\"></a>使用混合查找方式查找文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /tmp -size +10000c -and -mtime +2 　　#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"Linux光盘挂载\"><a href=\"#Linux光盘挂载\" class=\"headerlink\" title=\"Linux光盘挂载\"></a>Linux光盘挂载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t iso9660 -o loop CentOs.iso /mnt/cdrom</span><br></pre></td></tr></table></figure>\n<h4 id=\"根据-CPU-使用来升序排序\"><a href=\"#根据-CPU-使用来升序排序\" class=\"headerlink\" title=\"根据 CPU 使用来升序排序\"></a>根据 CPU 使用来升序排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux --sort -pcpu | less</span><br></pre></td></tr></table></figure>\n<p>for host in VM-233-25-centos VM-226-228-centos VM-252-84-centos VM-232-137-centos VM-251-49-centos VM-249-233-centos VM-101-129-centos VM-101-234-centos; do ssh $host yum clean all; done</p>\n","categories":[],"tags":["linux"]},{"title":"一首英文歌","url":"https://infullstack.github.io/2015/11/02/一首英文歌/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hiding from the rain and snow </span><br><span class=\"line\">trying to forget but I won&apos;t let go </span><br><span class=\"line\">looking at a crowded street </span><br><span class=\"line\">listening to my own heart beat </span><br><span class=\"line\">so many people all around the world </span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<p>晚饭的时候，当餐厅缓缓响起这首《take me to your heart》. 随着这首美妙的歌曲渐入高潮，我随之吟唱起来，也勾起了一段高中时代的小回忆，同时向朋友述说着…</p>\n<p>2004年，还是在高一的时候，当Michael Learns to Rock发行《take me to your heart》这首歌曲，我们的英语老师觉得很好听，把歌词抄给我们记下，每到英语课，都会花几分钟，用磁带播放机一句一句播放，一句一句的教给我们，那个时候也是上英语课最开心的时刻，很快我们就会了，至今都能唱起。</p>\n<p>开心时光并没有延续太长时间，不久，英语老师被诊断出了胃癌晚期。</p>\n<p>然后英语老师缺席了我们后面的课程。</p>\n<p>学校发动了募捐，我们也经常组织探望老师，但这并没有改变什么。</p>\n<p>同学期，英语老师最终还是未能战胜病魔。《take me to your heart》也成了我们对老师最后的回忆。</p>\n<p>我想，如果放在现在，如果能早点发现，那并没有那么多如果。对于不可逆的事情，你唯一能做也许就是令自己不要忘记。</p>\n<p>过去10多年，这首歌但一直记忆深刻，《take me to your heart》也成了我最拿手的英文歌曲。</p>\n<p>我想，这也是我记忆最深的一首歌。</p>\n<hr>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"420\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=4173190&auto=1&height=66\"></iframe>\n\n<hr>\n<blockquote>\n<p>《take me to your heart》是迈克学摇滚（Michael Learns to Rock）主唱的一首歌，此歌曲翻唱自张学友的《吻别》。收录于专辑《Take Me to Your Heart》，2004年发行。</p>\n<p> 迈克学摇滚（Michael Learns To Rock），始建于1987年，曾被形容是斯堪的纳维亚音乐传统与西洋流行音乐的相遇，绝非「丹麦团」三个字就可以解释。他们全球千万张惊人的销售量是一般乐团少有的，迈克学摇滚深入慢摇音乐情感层面并从中精确掌握音符组构成果的能力，使得他们成为丹麦音乐史上最成功的团体之一。迈克学摇滚在家乡已经有超过五十万张唱片的销售，但更惊人的是他们在全球的销售数字更是高达千万张之高！其中在亚洲更是掀起一阵狂潮。</p>\n</blockquote>\n","categories":[],"tags":["歌"]},{"title":"动态加载多说评论","url":"https://infullstack.github.io/2015/10/28/动态加载多说评论/","content":"<p>由于博客使用了异步加载，本来想用angularjs，但angularjs对于一个小博客来说有点重了，所以还是使用了pushState + Ajax(pjax)，于是多说也需要实现动态加载。</p>\n<h3 id=\"多说代码\"><a href=\"#多说代码\" class=\"headerlink\" title=\"多说代码\"></a>多说代码</h3><ul>\n<li>引入多说JS</li>\n<li>点击按钮，展示多说评论</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=&quot;expandComments&quot; onclick=&quot;toggleDuoshuoComments(&apos;#comment-box&apos;);&quot;&gt;展开评论&lt;/span&gt;</span><br><span class=\"line\">&lt;div id=&quot;comment-box&quot; &gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var duoshuoQuery = &#123;short_name:&quot;misray&quot;&#125;;</span><br><span class=\"line\">function toggleDuoshuoComments(container)&#123;</span><br><span class=\"line\">\t$(&quot;#expandComments&quot;).hide();</span><br><span class=\"line\">    var el = document.createElement(&apos;div&apos;);//该div不需要设置class=&quot;ds-thread&quot;</span><br><span class=\"line\">    el.setAttribute(&apos;data-thread-key&apos;, &apos;&lt;?php echo $post_id ;?&gt;&apos;);//必选参数</span><br><span class=\"line\">    el.setAttribute(&apos;data-url&apos;, &apos;&lt;?php the_url(); ?&gt;&apos;);//必选参数</span><br><span class=\"line\">    el.setAttribute(&apos;data-author-key&apos;, &apos;misray&apos;);//可选参数</span><br><span class=\"line\">\tel.setAttribute(&apos;data-title&apos;, &apos;&lt;?php the_title(); ?&gt;&apos;);//可选参数</span><br><span class=\"line\">    DUOSHUO.EmbedThread(el);</span><br><span class=\"line\">    jQuery(container).append(el);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">\tvar ds = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">\tds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class=\"line\">\tds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class=\"line\">\tds.charset = &apos;UTF-8&apos;;</span><br><span class=\"line\">\t(document.getElementsByTagName(&apos;head&apos;)[0]</span><br><span class=\"line\">\t || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS-样式\"><a href=\"#CSS-样式\" class=\"headerlink\" title=\"CSS 样式\"></a>CSS 样式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#expandComments&#123;</span><br><span class=\"line\">\tpadding: 8px 15px;</span><br><span class=\"line\">\tborder: 1px solid #ff5e52;</span><br><span class=\"line\">\ttext-decoration: none;</span><br><span class=\"line\">\tcursor: hand;</span><br><span class=\"line\">\tborder-color: #ff5e52;</span><br><span class=\"line\">\tcolor:#fff;</span><br><span class=\"line\">\tborder-radius: 10px;</span><br><span class=\"line\">\tbackground-color: #ff5e52;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#expandComments:hover&#123;</span><br><span class=\"line\">\tcolor:#ff5e52;</span><br><span class=\"line\">\tborder: 1px solid #ddd;</span><br><span class=\"line\">\tbackground-color: #fff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":["javascript"]},{"title":"nba2016赛季前瞻","url":"https://infullstack.github.io/2015/10/28/nba2016赛季前瞻/","content":"<p>今天NBA 2015-2016赛季常规赛开始了，这注定又是一个精彩的赛季。让我来盘点下新赛季的值得关注的地方。</p>\n<h2 id=\"库里\"><a href=\"#库里\" class=\"headerlink\" title=\"库里\"></a>库里</h2><p>上赛季的MVP和总冠军，常规赛揭幕战，首节13投9中砍下24分，三节40分，新赛季卫冕之路值得期待！</p>\n<h2 id=\"科比\"><a href=\"#科比\" class=\"headerlink\" title=\"科比\"></a>科比</h2><p>科比，尽管休战了这么长时间，但他的出现，还是光芒万丈，这个赛季能进季后赛，湖人就算成功的！</p>\n<p>这是告别赛季，没有科比的NBA，少了太多。</p>\n<h2 id=\"书豪\"><a href=\"#书豪\" class=\"headerlink\" title=\"书豪\"></a>书豪</h2><p>季前赛，打出几场队中MVP表现，新赛季，新球队，希望书豪能在乔帮主麾下展现自我。</p>\n<h2 id=\"詹姆斯\"><a href=\"#詹姆斯\" class=\"headerlink\" title=\"詹姆斯\"></a>詹姆斯</h2><p>James足够伟大，别又是亚军。</p>\n<h2 id=\"其他看点\"><a href=\"#其他看点\" class=\"headerlink\" title=\"其他看点\"></a>其他看点</h2><ul>\n<li>Chris Paul：打入西决？</li>\n<li>Kevin Durant：尝尝总冠军滋味？</li>\n<li>James Harden ：火箭升空？</li>\n<li>Rose：东部登顶？</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"- -\"></a>- -</h2><p>漫长的常规赛，考验的是球员和球队的韧性。</p>\n","categories":[],"tags":[]},{"title":"聊聊这几年的数据泄漏","url":"https://infullstack.github.io/2015/10/20/聊聊这几年的数据泄漏/","content":"<p>近几年，互联网数据泄漏事件频出， 事件发生的第一时间，往往我会下载泄漏数据，查看下自己是否在泄漏数据中。</p>\n<p>下面就谈谈自己遇到的几次泄密事件。</p>\n<h2 id=\"CSDN数据泄漏\"><a href=\"#CSDN数据泄漏\" class=\"headerlink\" title=\"CSDN数据泄漏\"></a>CSDN数据泄漏</h2><p>2011年，CSDN遭遇到了一次重大的账户泄漏，黑客公开CSDN网站数据库 600余万用户资料泄密，所有账户密码都是明文存储。同时也开启了近几年国内互联网的泄漏风暴。</p>\n<p>2010年就步入IT职场的我，毫无疑问，当时最火的IT社区就是<a href=\"http://iteye.com\" target=\"_blank\" rel=\"noopener\">javaeye</a>和<a href=\"http://www.csdn.net\" target=\"_blank\" rel=\"noopener\">CSDN</a>，所以我的账户也在泄漏数据之列。那个时候我的所有密码基本一致，虽然那个时候对我并没有造成过多的影响，但那时我就意识到帐号数据都处在很危险的地方。</p>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"http://www.chinaz.com/news/2011/1221/227512.shtml\" target=\"_blank\" rel=\"noopener\">黑客公开CSDN网站数据库 600余万用户资料泄密</a></li>\n<li><a href=\"http://www.wooyun.org/bugs/wooyun-2011-03692\" target=\"_blank\" rel=\"noopener\">CSDN数据库泄露，大量用户真实账号密码外泄</a></li>\n</ul>\n<h2 id=\"汉庭如家2000万账户泄漏\"><a href=\"#汉庭如家2000万账户泄漏\" class=\"headerlink\" title=\"汉庭如家2000万账户泄漏\"></a>汉庭如家2000万账户泄漏</h2><p>2013年10月，汉庭如家2000万账户泄密，庆幸的是，那个时候汉庭如家基本没住过，所以我的数据不在其中。</p>\n<p>有趣的是，由于我从事大数据工作，在一次与某电科院交流时，客户提议，导入2000万文本数据到hive中，进行检索，测试我们的产品性能，片刻时间导入之后，输入某领导手机后，刷刷刷，多条开房记录在秒内查询出来了，把我们都笑晕了。</p>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"http://www.wooyun.org/bugs/wooyun-2010-034935\" target=\"_blank\" rel=\"noopener\">如家等大量酒店客户开房记录被第三方存储并因漏洞导致泄露</a></li>\n</ul>\n<h2 id=\"QQ数据泄漏\"><a href=\"#QQ数据泄漏\" class=\"headerlink\" title=\"QQ数据泄漏\"></a>QQ数据泄漏</h2><p>2013年，7000万个腾讯QQ群数据遭泄露，泄漏文件为SQL Server的数据库导出格式，“解压后达90多G，大概有7000多万个QQ群，12亿多个部分重复的QQ号码。</p>\n<p>当然我的qq信息，也在其中，至今，在社工库都能查到我的相关信息。-_-!!</p>\n<h2 id=\"12306账户数据泄密\"><a href=\"#12306账户数据泄密\" class=\"headerlink\" title=\"12306账户数据泄密\"></a>12306账户数据泄密</h2><p>在14年12月底，正是预定春运回家火车的时间，10几万条12306明文账户信息从网上公开，我立即下载下来，还好没有的帐号，随机选了几条数据登录12306，都能登录，当然我没有把别的票退掉。但这个的后果可想而知。</p>\n<p><a href=\"http://www.wooyun.org/bugs/wooyun-2014-088532\" target=\"_blank\" rel=\"noopener\">乌云网漏洞</a></p>\n<h2 id=\"网易邮箱\"><a href=\"#网易邮箱\" class=\"headerlink\" title=\"网易邮箱\"></a>网易邮箱</h2><p>其实，昨日就有大量网易邮箱遭全面暴力破解的相关新闻放出，大量网友称绑定的账号遭泄露。绑定网易邮箱的Apple ID被锁成砖，iPhone存储数据被清空。其中，包括苹果Apple ID在内的微博、支付宝、百度云盘等都受到影响。</p>\n<p>还好，我的iphone先于帐号丢了。  -_- !!</p>\n<p>相关阅读<br><a href=\"http://business.sohu.com/20151020/n423654851.shtml\" target=\"_blank\" rel=\"noopener\">网易邮箱现巨大漏洞 过亿数据遭泄漏</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>当然，这些只是近几年较为重大的事件，其他泄漏事件也不少。<a href=\"http://www.wooyun.org/\" target=\"_blank\" rel=\"noopener\">http://www.wooyun.org/</a>上经常会有帐号安全漏洞。</p>\n<h2 id=\"怎么规避账户泄漏\"><a href=\"#怎么规避账户泄漏\" class=\"headerlink\" title=\"怎么规避账户泄漏\"></a>怎么规避账户泄漏</h2><p>用户无法避免账户泄漏，但需要确保不会引起连锁反应，所以我们最好控制每个账户的密码都不同，可以把密码设置为一段有含义的字母，好记又复杂。</p>\n<p>推荐阅读：</p>\n<ul>\n<li><a href=\"http://news.cnblogs.com/n/213772/\" target=\"_blank\" rel=\"noopener\">一个密码改变了我的人生</a></li>\n</ul>\n<h3 id=\"我的银行密码设置方法\"><a href=\"#我的银行密码设置方法\" class=\"headerlink\" title=\"我的银行密码设置方法\"></a>我的银行密码设置方法</h3><p>卡号选几位  再利用各种运算符（加减乘除左移右移等）得出一个公式，算出一个密码。这样，只要有卡号，我就有密码了。(<em>^__^</em>) 嘻嘻</p>\n","categories":[],"tags":["安全","数据","互联网"]},{"title":"说说我的利器","url":"https://infullstack.github.io/2015/10/16/说说我的利器/","content":"<h2 id=\"介绍一下你自己和所做的工作。\"><a href=\"#介绍一下你自己和所做的工作。\" class=\"headerlink\" title=\"介绍一下你自己和所做的工作。\"></a>介绍一下你自己和所做的工作。</h2><p>我是Misray，89年生，是一名全栈工程师，现在在一家大数据公司任职研发，懂点大数据（hadoop、mapreduce、spark、flume）、JAVA、前端（html5、css3、js、angular js、nodejs ），样样通样样松，哈哈。</p>\n<p>当然平时写写技术和生活博客、倒腾新奇技术，以前的博客在<a href=\"http://iyanlei.com\" target=\"_blank\" rel=\"noopener\">Ray</a>，也弄了个订阅工具<a href=\"http://feedly.xyz\" target=\"_blank\" rel=\"noopener\">Feedly</a></p>\n<h2 id=\"你都在使用哪些硬件？\"><a href=\"#你都在使用哪些硬件？\" class=\"headerlink\" title=\"你都在使用哪些硬件？\"></a>你都在使用哪些硬件？</h2><p>ThinkPad T440p，升级成了16内存 + 128 SSD  + win 10，对于经常出差的我，开发和使用足矣</p>\n<h2 id=\"软件呢？\"><a href=\"#软件呢？\" class=\"headerlink\" title=\"软件呢？\"></a>软件呢？</h2><h3 id=\"PC软件\"><a href=\"#PC软件\" class=\"headerlink\" title=\"PC软件\"></a>PC软件</h3><p><a href=\"http://www.atom.io\" target=\"_blank\" rel=\"noopener\">GitHub Atom</a> ,以前经常使用notepad和sublime text，但atom的出现，就换了。但atom的启动速度偏慢。</p>\n<p><a href=\"http://www.eclipse.com\" target=\"_blank\" rel=\"noopener\">eclipse</a>，JAVA开发的必备工具。当然也可以使用IntelliJ IDEA，使用eclipse只是习惯。</p>\n<p>Clover，win下，浏览文件夹像使用chrome一样</p>\n<p><a href=\"http://www.hongxingchajian.com\" target=\"_blank\" rel=\"noopener\">红杏</a>  和 shadowsocks ，不解释</p>\n<p><a href=\"http://www.phpstudy.net/\" target=\"_blank\" rel=\"noopener\">PHPStudy</a> ，开发PHP的利器</p>\n<p><a href=\"https://pomotodo.com/\" target=\"_blank\" rel=\"noopener\">番茄土豆</a>，番茄工作法 + GTD  效率工具</p>\n<p><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">有道云笔记</a>，够用的笔记工具</p>\n<p>Xshell 、WinSCP</p>\n<h3 id=\"APP软件\"><a href=\"#APP软件\" class=\"headerlink\" title=\"APP软件\"></a>APP软件</h3><p>知乎日报、好奇心、startupnews、开源中国、简书、uber、有道云笔记、掘金</p>\n<h2 id=\"你最理想的工作环境是什么？\"><a href=\"#你最理想的工作环境是什么？\" class=\"headerlink\" title=\"你最理想的工作环境是什么？\"></a>你最理想的工作环境是什么？</h2><p>大木桌、人体学工程椅子、网速佳、空气环境好。</p>\n<h2 id=\"你平时获得工作灵感的方式有哪些？\"><a href=\"#你平时获得工作灵感的方式有哪些？\" class=\"headerlink\" title=\"你平时获得工作灵感的方式有哪些？\"></a>你平时获得工作灵感的方式有哪些？</h2><p>设计灵感网站</p>\n<p> <a href=\"http://www.dirbbble.com\" target=\"_blank\" rel=\"noopener\">Dribbble</a> 、  <a href=\"http://www.ui.cn\" target=\"_blank\" rel=\"noopener\">UI</a>、 <a href=\"http://next.36kr.com/\" target=\"_blank\" rel=\"noopener\">Next</a>、 <a href=\"http://www.v2ex.com\" target=\"_blank\" rel=\"noopener\">V2ex</a></p>\n<p>技术开发网站</p>\n<p> oschina开源中国 、cnblogs、 并发编程开发、importnews等</p>\n<p>逛这些社区和网站是主要的灵感来源，网上看到喜欢的设计，会保存下来，在疲惫或毫无灵感时候欣赏，找到灵感。</p>\n<h2 id=\"推荐一件生活中的利器给大家。\"><a href=\"#推荐一件生活中的利器给大家。\" class=\"headerlink\" title=\"推荐一件生活中的利器给大家。\"></a>推荐一件生活中的利器给大家。</h2><p>博朗或飞利浦的电动牙刷，保证口腔的干净对程序员十分重要。</p>\n<p><strong>本文参与了「利器社群计划」，发现更多创造者和他们的工具：<a href=\"http://liqi.io/community/\" target=\"_blank\" rel=\"noopener\">利器</a></strong></p>\n","categories":[],"tags":["利器","mac"]},{"title":"Linux磁盘批量分区和挂载","url":"https://infullstack.github.io/2014/12/01/Linux磁盘批量分区和挂载/","content":"<h4>Format</h4>\n\n<pre><code>#!/bin/sh\n\n#DEVICE_LIST=\"\"\nDEVICE_LIST=\"/dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh\"\nfor DEVICE in $DEVICE_LIST\ndo\n  echo \"+++++create partition for $DEVICE......\"\n  parted -s $DEVICE mklabel gpt mkpart gpt2t ext2 0% 100%\n  PARTITION=\"$DEVICE\"\"1\"\n  echo \"+++++formatting $PARTITION......\"\n  mkfs.ext4 -T largefile $PARTITION\ndone\n</code></pre>\n\n<h4>Mount</h4>\n\n<pre><code>#!/bin/sh\n\n#backup /etc/fstab\ncp /etc/fstab /etc/fstab.bak\nPARTITION_LIST=\"sdb1 sdd1 sde1 sdf1 sdg1 sdh1\"\n\nfor PARTITION in $PARTITION_LIST\ndo\n  UUID=`blkid \"/dev/\"\"$PARTITION\" | awk '{print $2}' | sed 's/\\\"//g'`\n  echo $UUID\n\n  echo \"add $PARTITION to /etc/fstab\"\n  MOUNTDIR=\"/mnt/\"\"$PARTITION\"\n  echo \"mkdir -p $MOUNTDIR\"\n  mkdir -p $MOUNTDIR\n\n  echo \"appending \\\"$UUID $MOUNTDIR ext4 defaults 0 0\\\" to /etc/fstab \"\n  echo \"$UUID $MOUNTDIR ext4 defaults 0 0\" &gt;&gt; /etc/fstab\n  echo \"\"\ndone\n\n#mount all partitions\nmount -a\n\n#show mounted partitions\ndf -h\n</code></pre>\n","categories":[],"tags":[]},{"title":"instantClick让页面提前加载200ms","url":"https://infullstack.github.io/2014/11/28/instantClick让页面提前加载200ms/","content":"<!--markdown-->## 前言 ##<br><br>加速网站加载的方式有很多，在<a href=\"http://blog.huangweipeng.org/\" target=\"_blank\" rel=\"noopener\">@Roc</a>的推荐下，我找到了这个<a href=\"http://instantclick.io/\" target=\"_blank\" rel=\"noopener\">InstantClick.js</a>，仔细查看了官网的英文文档，发现InstantClick.js有个很好的实现思路(<a href=\"http://instantclick.io/how-it-works\" target=\"_blank\" rel=\"noopener\">how-it-works</a>)。<br><br>在访问者点击一个链接之前( 鼠标测试：<a href=\"http://instantclick.io/click-test\" target=\"_blank\" rel=\"noopener\">test yourself here</a> )：<br> - 悬停 hover (hover-&gt;click之间200ms左右)<br> - 鼠标按下 Mousedown (Mousedown-&gt;click之间100ms左右)，<br> - Touchstart 手机触碰<br><br>这两个事件之间通常有200ms的间隔，InstantClick 利用这个时间间隔预加载页面。这样当你点击页面的时候，其实页面已经加载到本地了，呈现当然也就会很快。<br><br>当然InstantClick 也使用了 Pjax： pushState 和 Ajax 技术<br><br>同时我试用了下，的确效果不错。如果你的博客需要实现Pjax，InstantClick会是个不错的选择。<br><br>## 使用方法 ##<br><br>### 下载instantclick.js ###<br><br>下载地址：<a href=\"http://instantclick.io/v3.0.1/instantclick.min.js\" target=\"_blank\" rel=\"noopener\">instantclick.min.js</a>仅仅2.5Kb，很小<br><br>### 使用 ###<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;instantclick.min.js&quot; data-no-instant&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>data-no-instant的含义是，这个JS只会运行一次，需要根据自己的情况，设置</li>\n<li>如果想避免不必要的预加载，关闭hover，启用Mousedown是个不错的选择，moursedown意味着已经点击链接</li>\n</ul>\n<h3 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h3><p>打开chrome console，查看network视图，会在每次hover时，都可以先加载页面，在click时展示结果页面。</p>\n<p>由于没有一个好的截动画软件，所以没有gif动画展示</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>InstantClick也提供了几个事件可以设置。</p>\n<ol>\n<li>change 页面更改完毕，即click触发加载后</li>\n<li>fetch  页面开始预加载</li>\n<li>receive 页面预加载完毕，即：hover或mousedown触发的预加载，但不一定会change，因为用户不一定click</li>\n</ol>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>因为使用ajax，所以google ga不会统计PV，所以增加change方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;instantclick.min.js&quot; data-no-instant&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script data-no-instant&gt;</span><br><span class=\"line\">/* Google Analytics code here, without ga(&apos;send&apos;, &apos;pageview&apos;) */</span><br><span class=\"line\"> </span><br><span class=\"line\">InstantClick.on(&apos;change&apos;, function() &#123;</span><br><span class=\"line\">  ga(&apos;send&apos;, &apos;pageview&apos;, location.pathname + location.search);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">InstantClick.init();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["javascript"]},{"title":"java多叉树的实现","url":"https://infullstack.github.io/2014/11/10/java多叉树的实现/","content":"<!--markdown-->## 概要 ##<br><br>java实现的多叉数，开发过程中偶尔需要用到<br><br>## 功能 ##<br><br><strong>插入：</strong><br><br> 1. 插入一个child节点到当前节点中<br> 2. 动态的插入一个新的节点到当前树中<br><br><strong>查询：</strong><br><br> 1. 返回当前节点的父辈节点集合<br> 2. 返回当前节点的晚辈集合<br> 3. 返回当前节点的孩子集合<br> 4. 找到一颗树中某个节点<br> 5. 遍历一棵树，层次遍历<br><br><strong>删除：</strong><br><br> 1. 删除节点和它下面的晚辈<br> 2. 删除当前节点的某个子节点<br><br>## 代码 ##<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.Serializable;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeNode implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate int parentId;</span><br><span class=\"line\">\tprivate int selfId;</span><br><span class=\"line\">\tprotected String nodeName;</span><br><span class=\"line\">\tprotected Object obj;</span><br><span class=\"line\">\tprotected TreeNode parentNode;</span><br><span class=\"line\">\tprotected List&lt;TreeNode&gt; childList;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic TreeNode() &#123;</span><br><span class=\"line\">\t\tinitChildList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic TreeNode(TreeNode parentNode) &#123;</span><br><span class=\"line\">\t\tthis.getParentNode();</span><br><span class=\"line\">\t\tinitChildList();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean isLeaf() &#123;</span><br><span class=\"line\">\t\tif (childList == null) &#123;</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tif (childList.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 插入一个child节点到当前节点中 */</span><br><span class=\"line\">\tpublic void addChildNode(TreeNode treeNode) &#123;</span><br><span class=\"line\">\t\tinitChildList();</span><br><span class=\"line\">\t\tchildList.add(treeNode);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void initChildList() &#123;</span><br><span class=\"line\">\t\tif (childList == null)</span><br><span class=\"line\">\t\t\tchildList = new ArrayList&lt;TreeNode&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean isValidTree() &#123;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 返回当前节点的父辈节点集合 */</span><br><span class=\"line\">\tpublic List&lt;TreeNode&gt; getElders() &#123;</span><br><span class=\"line\">\t\tList&lt;TreeNode&gt; elderList = new ArrayList&lt;TreeNode&gt;();</span><br><span class=\"line\">\t\tTreeNode parentNode = this.getParentNode();</span><br><span class=\"line\">\t\tif (parentNode == null) &#123;</span><br><span class=\"line\">\t\t\treturn elderList;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\telderList.add(parentNode);</span><br><span class=\"line\">\t\t\telderList.addAll(parentNode.getElders());</span><br><span class=\"line\">\t\t\treturn elderList;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 返回当前节点的晚辈集合 */</span><br><span class=\"line\">\tpublic List&lt;TreeNode&gt; getJuniors() &#123;</span><br><span class=\"line\">\t\tList&lt;TreeNode&gt; juniorList = new ArrayList&lt;TreeNode&gt;();</span><br><span class=\"line\">\t\tList&lt;TreeNode&gt; childList = this.getChildList();</span><br><span class=\"line\">\t\tif (childList == null) &#123;</span><br><span class=\"line\">\t\t\treturn juniorList;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tint childNumber = childList.size();</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; childNumber; i++) &#123;</span><br><span class=\"line\">\t\t\t\tTreeNode junior = childList.get(i);</span><br><span class=\"line\">\t\t\t\tjuniorList.add(junior);</span><br><span class=\"line\">\t\t\t\tjuniorList.addAll(junior.getJuniors());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn juniorList;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 返回当前节点的孩子集合 */</span><br><span class=\"line\">\tpublic List&lt;TreeNode&gt; getChildList() &#123;</span><br><span class=\"line\">\t\treturn childList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 删除节点和它下面的晚辈 */</span><br><span class=\"line\">\tpublic void deleteNode() &#123;</span><br><span class=\"line\">\t\tTreeNode parentNode = this.getParentNode();</span><br><span class=\"line\">\t\tint id = this.getSelfId();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (parentNode != null) &#123;</span><br><span class=\"line\">\t\t\tparentNode.deleteChildNode(id);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 删除当前节点的某个子节点 */</span><br><span class=\"line\">\tpublic void deleteChildNode(int childId) &#123;</span><br><span class=\"line\">\t\tList&lt;TreeNode&gt; childList = this.getChildList();</span><br><span class=\"line\">\t\tint childNumber = childList.size();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; childNumber; i++) &#123;</span><br><span class=\"line\">\t\t\tTreeNode child = childList.get(i);</span><br><span class=\"line\">\t\t\tif (child.getSelfId() == childId) &#123;</span><br><span class=\"line\">\t\t\t\tchildList.remove(i);</span><br><span class=\"line\">\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 动态的插入一个新的节点到当前树中 */</span><br><span class=\"line\">\tpublic boolean insertJuniorNode(TreeNode treeNode) &#123;</span><br><span class=\"line\">\t\tint juniorParentId = treeNode.getParentId();</span><br><span class=\"line\">\t\tif (this.parentId == juniorParentId) &#123;</span><br><span class=\"line\">\t\t\taddChildNode(treeNode);</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tList&lt;TreeNode&gt; childList = this.getChildList();</span><br><span class=\"line\">\t\t\tint childNumber = childList.size();</span><br><span class=\"line\">\t\t\tboolean insertFlag;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; childNumber; i++) &#123;</span><br><span class=\"line\">\t\t\t\tTreeNode childNode = childList.get(i);</span><br><span class=\"line\">\t\t\t\tinsertFlag = childNode.insertJuniorNode(treeNode);</span><br><span class=\"line\">\t\t\t\tif (insertFlag == true)</span><br><span class=\"line\">\t\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 找到一颗树中某个节点 */</span><br><span class=\"line\">\tpublic TreeNode findTreeNodeById(int id) &#123;</span><br><span class=\"line\">\t\tif (this.selfId == id)</span><br><span class=\"line\">\t\t\treturn this;</span><br><span class=\"line\">\t\tif (childList.isEmpty() || childList == null) &#123;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tint childNumber = childList.size();</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; childNumber; i++) &#123;</span><br><span class=\"line\">\t\t\t\tTreeNode child = childList.get(i);</span><br><span class=\"line\">\t\t\t\tTreeNode resultNode = child.findTreeNodeById(id);</span><br><span class=\"line\">\t\t\t\tif (resultNode != null) &#123;</span><br><span class=\"line\">\t\t\t\t\treturn resultNode;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn null;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 遍历一棵树，层次遍历 */</span><br><span class=\"line\">\tpublic void traverse() &#123;</span><br><span class=\"line\">\t\tif (selfId &lt; 0)</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\tprint(this.selfId);</span><br><span class=\"line\">\t\tif (childList == null || childList.isEmpty())</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\tint childNumber = childList.size();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; childNumber; i++) &#123;</span><br><span class=\"line\">\t\t\tTreeNode child = childList.get(i);</span><br><span class=\"line\">\t\t\tchild.traverse();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void print(int content) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.valueOf(content));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setChildList(List&lt;TreeNode&gt; childList) &#123;</span><br><span class=\"line\">\t\tthis.childList = childList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getParentId() &#123;</span><br><span class=\"line\">\t\treturn parentId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setParentId(int parentId) &#123;</span><br><span class=\"line\">\t\tthis.parentId = parentId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getSelfId() &#123;</span><br><span class=\"line\">\t\treturn selfId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setSelfId(int selfId) &#123;</span><br><span class=\"line\">\t\tthis.selfId = selfId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic TreeNode getParentNode() &#123;</span><br><span class=\"line\">\t\treturn parentNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setParentNode(TreeNode parentNode) &#123;</span><br><span class=\"line\">\t\tthis.parentNode = parentNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getNodeName() &#123;</span><br><span class=\"line\">\t\treturn nodeName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setNodeName(String nodeName) &#123;</span><br><span class=\"line\">\t\tthis.nodeName = nodeName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Object getObj() &#123;</span><br><span class=\"line\">\t\treturn obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setObj(Object obj) &#123;</span><br><span class=\"line\">\t\tthis.obj = obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["java","算法","多叉树"]},{"title":"js操作cookie","url":"https://infullstack.github.io/2014/11/03/js操作cookie/","content":"<!--markdown-->## 前言 ##<br><br>通过对cookie的操作，可以利用Cookies包含信息的任意性来筛选并经常性维护这些信息，以判断在HTTP传输中的状态。<br><br>典型的应用是<br><br> 1. 判定注册用户是否已经登录网站，用户可能会得到提示，是否在下一次进入此网站时保留用户信息以便简化登录手续，这些都是Cookies的功用。<br><br>## 代码 ##<br><br><br><strong>设置cookie</strong><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置cookie</span><br><span class=\"line\">function setCookie(key,value) &#123;</span><br><span class=\"line\">\tvar now = new Date();</span><br><span class=\"line\">\tvar end = 10;</span><br><span class=\"line\">\tnow.setTime(now.getTime() + end * 24 * 3600 * 1000);</span><br><span class=\"line\">\tdocument.cookie = key + &quot;=&quot; + Q + &quot;;path=/;expires=&quot; + now.toGMTString() + &quot;;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取cookie</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获得保存在COOKIE里的key的值</span><br><span class=\"line\">function getCookie(key) &#123;</span><br><span class=\"line\">\tvar c = document.cookie.split(&quot;; &quot;);</span><br><span class=\"line\">\tfor (var i = 0; i &lt; c.length; i++) &#123;</span><br><span class=\"line\">\t\tvar d = c[i].split(&quot;=&quot;);</span><br><span class=\"line\">\t\tif (d[0] == key) &#123;</span><br><span class=\"line\">\t\t\treturn unescape(d[1]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn &apos;&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//比如：可以保存用户设置的页面风格，来展示不同风格</span><br><span class=\"line\">setCookie(&quot;css-style&quot;,&quot;default&quot;);</span><br><span class=\"line\">getCookie(&quot;css-style&quot;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>更丰富的参数可以参考：</p>\n<p> -<a href=\"http://www.w3school.com.cn/js/js_cookies.asp\" target=\"_blank\" rel=\"noopener\">JavaScript Cookies</a></p>\n","categories":[],"tags":["javascript","cookie"]},{"title":"typecho使用pjax","url":"https://infullstack.github.io/2014/09/28/typecho使用pjax/","content":"<!--markdown-->## 前言 ##<br>传统ajax，只能异步获取到数据，但是不能动态的改变网页地址。<br><br>pjax即ajax+history.pushState<br><br>HTML5里引用了新的API，history.pushState和history.replaceState，就是通过这个接口做到无刷新改变页面URL的。<br><br>最典型的应用网站是<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>，本站也加入了pjax<br><br>我使用的是welefen封装过的pjax的jQuery版本<br><br> - 同时支持了缓存和本地存储，下次访问的时候直接读取本地数据，无需在次访问。<br> - 并且展现方式支持动画技术，可以使用系统自带的动画方式，也可以自定义动画展现方式。<br><br><br>## 使用步骤 ##<br><br><strong>1. 下载jquery.pjax.js</strong><br><a href=\"https://github.com/welefen/pjax\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>引用下载到的jquery.pjax.js到header.php中<br><br><strong>2. 对a链接进行使用pjax绑定</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//本站实例</span><br><span class=\"line\">jQuery(document).ready(function()&#123;</span><br><span class=\"line\">\tvar $=jQuery; </span><br><span class=\"line\">        //绑定链接</span><br><span class=\"line\">\t$.pjax(&#123;</span><br><span class=\"line\">\t\tselector: &quot;a[href^=&apos;http://iyanlei.com&apos;][href$=&apos;.html&apos;]&quot;,</span><br><span class=\"line\">\t\tcontainer: &apos;.ajaxdiv&apos;, //内容替换的容器</span><br><span class=\"line\">\t\tshow: &apos;slide&apos;,  //展现的动画，支持默认和fade, 可以自定义动画方式，这里为自定义的function即可。</span><br><span class=\"line\">\t\tcache: false,  //是否使用缓存</span><br><span class=\"line\">\t\tstorage: true,  //是否使用本地存储</span><br><span class=\"line\">\t\ttitleSuffix: &apos; | Ray&apos;, //标题后缀</span><br><span class=\"line\">\t\tfilter: function()&#123;&#125;,</span><br><span class=\"line\">\t\tcallback: function(status)&#123;</span><br><span class=\"line\">\t\t\t$(&quot;#nav-menu&quot;).addClass(&quot;animated fadeInUp&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;); </span><br><span class=\"line\">        //绑定跳转开始事件</span><br><span class=\"line\">\t$(&quot;.ajaxdiv&quot;).bind(&quot;pjax.start&quot;,</span><br><span class=\"line\">\t\t function() &#123; </span><br><span class=\"line\">\t\t\t$(&quot;.ajaxdiv&quot;).css(&quot;opacity&quot;,&quot;0.6&quot;);</span><br><span class=\"line\">\t\t\t$(&quot;.spinner&quot;).css(&quot;opacity&quot;,&quot;1&quot;);</span><br><span class=\"line\">\t\t\t$(&quot;.spinner&quot;).show();\t\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t &#125;);</span><br><span class=\"line\">        //绑定跳转结束事件</span><br><span class=\"line\">\t$(&quot;.ajaxdiv&quot;).bind(&quot;pjax.end&quot;,</span><br><span class=\"line\">\t\t function() &#123;  </span><br><span class=\"line\">\t\t\t$(&quot;.spinner&quot;).hide();</span><br><span class=\"line\">\t\t\t$(&quot;.ajaxdiv&quot;).css(&quot;opacity&quot;,&quot;1&quot;);</span><br><span class=\"line\">\t\t\t// Main</span><br><span class=\"line\">\t\t\tinitHeader();</span><br><span class=\"line\">\t\t\taddListeners();</span><br><span class=\"line\">\t\t\tif (navigator.userAgent.indexOf(&apos;Firefox&apos;) &gt;= 0)&#123;</span><br><span class=\"line\">\t\t\t\tdocument.documentElement.scrollTop=120;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t   $(&apos;body&apos;).animate(&#123;scrollTop: 120&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t </span><br><span class=\"line\">\t &#125;); </span><br><span class=\"line\">\t </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>3. typecho后端修改</strong><br>因为pjax使用的还是AJAX,所以 异步请求的时候后端不能将公用的内容也返回。<br>即需要一个判断是否pjax请求的接口，判断如果是pjax请求时，仅返回公共的数据即可<br>在主题下的functions.php中声明如下函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function is_pjax()&#123;   </span><br><span class=\"line\">    return array_key_exists(&apos;HTTP_X_PJAX&apos;, $_SERVER) &amp;&amp; $_SERVER[&apos;HTTP_X_PJAX&apos;];   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>4. typecho页面修改</strong><br>可以在head.php和footer.php等的页面中添加判断，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请在公共部分加入下面的判断</span><br><span class=\"line\">&lt;?php if (!is_pjax()) &#123; ?&gt;</span><br><span class=\"line\">... //公共数据</span><br><span class=\"line\">&lt;?php &#125; ?&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.w3school.com.cn/html5/html_5_webstorage.asp\" target=\"_blank\" rel=\"noopener\">HTML 5 Web 存储</a><br><a href=\"https://github.com/welefen/pjax\" target=\"_blank\" rel=\"noopener\">pjax</a><br><a href=\"http://www.w3.org/html/ig/zh/wiki/HTML5/history\" target=\"_blank\" rel=\"noopener\">HTML5/history</a></p>\n","categories":[],"tags":["typecho","pjax","ajax"]},{"title":"MySQL和Hive的GroupBy排序","url":"https://infullstack.github.io/2014/09/16/MySQL和Hive的GroupBy排序/","content":"<!--markdown-->## 需求 ##<br><br>分组group by的时候，需要在group by 每组的结果进行排序<br><br>如这样的需求：<br><br>需要找出所有文章中，每个作者按时间排序的文章(最新文章)，想到的语句有：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from contents group by author order by pulishtime desc;</span><br></pre></td></tr></table></figure>\n<p><strong>这个语句的执行结果如何？</strong></p>\n<p>请先来看下where,group by,having,order by的执行顺序</p>\n<h2 id=\"group-by-order-by的执行顺序\"><a href=\"#group-by-order-by的执行顺序\" class=\"headerlink\" title=\"group by,order by的执行顺序\"></a>group by,order by的执行顺序</h2><p>当一个语句中同时使用where,group by,having,order by的时候，执行顺序如下：</p>\n<ol>\n<li>执行where xx对全表数据做筛选，返回第1个结果集</li>\n<li>针对第1个结果集使用group by分组，返回第2个结果集</li>\n<li>针对第2个结果集中的每1组数据执行select xx，有几组就执行几次，返回第3个结果集</li>\n<li>针对第3个结集执行having xx进行筛选，返回第4个结果集</li>\n<li>针对第4个结果集order by排序</li>\n</ol>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>由此得知，group by会在order by之前执行，所以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from contents group by author order by pulishtime desc;</span><br></pre></td></tr></table></figure>\n<p>得到的结果，并没有按照作者、发布时间排序</p>\n<h2 id=\"Group-By排序\"><a href=\"#Group-By排序\" class=\"headerlink\" title=\"Group By排序\"></a>Group By排序</h2><p>那如何实现group by排序呢？最简单的方式是，使用子查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">from </span><br><span class=\"line\">    (select * from contents  order by pulishtime desc ) as a </span><br><span class=\"line\">group by author;</span><br></pre></td></tr></table></figure>\n<p>这样就实现了group by排序,达到了想要的结果。</p>\n","categories":[],"tags":["hive","sql","mysql"]},{"title":"hive实现分页","url":"https://infullstack.github.io/2014/09/16/hive实现分页/","content":"<p><!--markdown-->hive没有像MySQL那样的limit start,end那样的写法实现分页，所以需要使用别的方式来实现分页。<br>以下是我想到的两种方式：</p>\n<h2 id=\"一、借助唯一标识字段\"><a href=\"#一、借助唯一标识字段\" class=\"headerlink\" title=\"一、借助唯一标识字段\"></a>一、借助唯一标识字段</h2><p>如果分页的表有唯一标识的字段，可以通过这个字段来实现分页：</p>\n<ul>\n<li>获取第一页数据：<br>注：同时需要记录这10条中最大的id为preId，作为下一页的条件。<br><code>select  * from table order by id asc limit 10;</code></li>\n<li>获取第二页数据：<br>注：同时保存数据中最大的id替换preId。<br><code>select * from table where id &gt;preId order by id asc limit 10;</code></li>\n</ul>\n<p>后续的页数获取同理。</p>\n<h2 id=\"二、使用row-number-函数\"><a href=\"#二、使用row-number-函数\" class=\"headerlink\" title=\"二、使用row number()函数\"></a>二、使用row number()函数</h2><p>如果分页的表没有唯一标识的字段，可以通过row number()函数来实现分页。</p>\n<ul>\n<li>首先使用row number()函数来给这个表做个递增的唯一标识：<br><code>create table newtable as select row number(1)  as id ,* from table;</code></li>\n<li>通过row number函数给表加了唯一标识之后，就可以利用<strong>第一个方法</strong>来进行分页。</li>\n</ul>\n","categories":[],"tags":[]},{"title":"MapReduce运行机制","url":"https://infullstack.github.io/2014/03/06/MapReduce运行机制/","content":"<p><img src=\"http://ww3.sinaimg.cn/mw690/005WTVurjw1eoyphmo5cmj30g00bvta7.jpg\" alt=\"\"></p>\n<p>从逻辑实体的角度讲解mapreduce运行机制，这些按照时间顺序包括：输入分片（input split）、map阶段、combiner阶段、shuffle阶段和reduce阶段。</p>\n<ol>\n<li><p>输入分片（input split）：在进行map计算之前，mapreduce会根据输入文件计算输入分片（input split），每个输入分片（input split）针对一个map任务，输入分片（input split）存储的并非数据本身，而是一个分片长度和一个记录数据的位置的数组，输入分片（input split）往往和hdfs的block（块）关系很密切，假如我们设定hdfs的块的大小是64mb，如果我们输入有三个文件，大小分别是3mb、65mb和127mb，那么mapreduce会把3mb文件分为一个输入分片（input split），65mb则是两个输入分片（input split）而127mb也是两个输入分片（input split），换句话说我们如果在map计算前做输入分片调整，例如合并小文件，那么就会有5个map任务将执行，而且每个map执行的数据大小不均，这个也是mapreduce优化计算的一个关键点。</p>\n</li>\n<li><p>map阶段：就是程序员编写好的map函数了，因此map函数效率相对好控制，而且一般map操作都是本地化操作也就是在数据存储节点上进行；</p>\n</li>\n<li><p>combiner阶段：combiner阶段是程序员可以选择的，combiner其实也是一种reduce操作，因此我们看见WordCount类里是用reduce进行加载的。Combiner是一个本地化的reduce操作，它是map运算的后续操作，主要是在map计算出中间文件前做一个简单的合并重复key值的操作，例如我们对文件里的单词频率做统计，map计算时候如果碰到一个hadoop的单词就会记录为1，但是这篇文章里hadoop可能会出现n多次，那么map输出文件冗余就会很多，因此在reduce计算前对相同的key做一个合并操作，那么文件会变小，这样就提高了宽带的传输效率，毕竟hadoop计算力宽带资源往往是计算的瓶颈也是最为宝贵的资源，但是combiner操作是有风险的，使用它的原则是combiner的输入不会影响到reduce计算的最终输入，例如：如果计算只是求总数，最大值，最小值可以使用combiner，但是做平均值计算使用combiner的话，最终的reduce计算结果就会出错。</p>\n</li>\n<li><p>shuffle阶段：将map的输出作为reduce的输入的过程就是shuffle了，这个是mapreduce优化的重点地方。这里我不讲怎么优化shuffle阶段，讲讲shuffle阶段的原理，因为大部分的书籍里都没讲清楚shuffle阶段。Shuffle一开始就是map阶段做输出操作，一般mapreduce计算的都是海量数据，map输出时候不可能把所有文件都放到内存操作，因此map写入磁盘的过程十分的复杂，更何况map输出时候要对结果进行排序，内存开销是很大的，map在做输出时候会在内存里开启一个环形内存缓冲区，这个缓冲区专门用来输出的，默认大小是100mb，并且在配置文件里为这个缓冲区设定了一个阀值，默认是0.80（这个大小和阀值都是可以在配置文件里进行配置的），同时map还会为输出操作启动一个守护线程，如果缓冲区的内存达到了阀值的80%时候，这个守护线程就会把内容写到磁盘上，这个过程叫spill，另外的20%内存可以继续写入要写进磁盘的数据，写入磁盘和写入内存操作是互不干扰的，如果缓存区被撑满了，那么map就会阻塞写入内存的操作，让写入磁盘操作完成后再继续执行写入内存操作，前面我讲到写入磁盘前会有个排序操作，这个是在写入磁盘操作时候进行，不是在写入内存时候进行的，如果我们定义了combiner函数，那么排序前还会执行combiner操作。</p>\n<p> 每次spill操作也就是写入磁盘操作时候就会写一个溢出文件，也就是说在做map输出有几次spill就会产生多少个溢出文件，等map输出全部做完后，map会合并这些输出文件。这个过程里还会有一个Partitioner操作，对于这个操作很多人都很迷糊，其实Partitioner操作和map阶段的输入分片（Input split）很像，一个Partitioner对应一个reduce作业，如果我们mapreduce操作只有一个reduce操作，那么Partitioner就只有一个，如果我们有多个reduce操作，那么Partitioner对应的就会有多个，Partitioner因此就是reduce的输入分片，这个程序员可以编程控制，主要是根据实际key和value的值，根据实际业务类型或者为了更好的reduce负载均衡要求进行，这是提高reduce效率的一个关键所在。到了reduce阶段就是合并map输出文件了，Partitioner会找到对应的map输出文件，然后进行复制操作，复制操作时reduce会开启几个复制线程，这些线程默认个数是5个，程序员也可以在配置文件更改复制线程的个数，这个复制过程和map写入磁盘过程类似，也有阀值和内存大小，阀值一样可以在配置文件里配置，而内存大小是直接使用reduce的tasktracker的内存大小，复制时候reduce还会进行排序操作和合并文件操作，这些操作完了就会进行reduce计算了。</p>\n</li>\n<li><p>reduce阶段：和map函数一样也是程序员编写的，最终结果是存储在hdfs上的。</p>\n</li>\n</ol>\n","categories":[],"tags":["mapreduce","原理"]},{"title":"生成不重复随机数简单算法","url":"https://infullstack.github.io/2011/09/08/生成不重复随机数简单算法/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Random;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Ray 2011-9-8</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RandomTest &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 声明一个种子</span><br><span class=\"line\">        int seed[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;</span><br><span class=\"line\">        // 存放生成后的数字</span><br><span class=\"line\">        int[] destArray = new int[seed.length];</span><br><span class=\"line\">        // 声明一个Random实例</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        // 循环种子</span><br><span class=\"line\">        for (int i = 0; i &lt; seed.length; i++) &#123;</span><br><span class=\"line\">            // 随机得到种子中的一个位置</span><br><span class=\"line\">            int j = random.nextInt(seed.length - i);</span><br><span class=\"line\">            // 把该位置上的种子输出</span><br><span class=\"line\">            destArray[i] = seed[j];</span><br><span class=\"line\">            // 把种子中末尾的种子替换得到的种子</span><br><span class=\"line\">            seed[j] = seed[seed.length - 1 - i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(destArray));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":["算法","不重复随机数"]},{"title":"about","url":"https://infullstack.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://infullstack.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://infullstack.github.io/css/personal-style.css","content":"/**.home_html{\n \tbackground-color: #0a0a0a;\n\tbackground-image: url(https://images.unsplash.com/photo-1501883590538-958e09295331?auto=format&fit=crop&w=2550&q=80);\n\tbackground-position: left top;\n\tbackground-size: cover;\n\tbackground-attachment: scroll;\n}**/\n\n.content-home .slogan{\n\tmargin:0px;\n\tfont-size: 18px;\n\tcolor: #000;\n\tmargin-top: 20px;\n}\n.content-home .location{\n\tcolor: #666\n}\n.content-home .avatar img{\n\twidth: 128px;\n\theight: 128px;\n}\n.content-home .nav .item a{\n\tcolor:#888;\n}\nhr{\n\tmax-width: 500px\n}\n.content-home .nav{\n\tmargin:0px;\n}\n.content-home *{\n\tfont-family: PingFang SC,Hiragino Sans GB,Microsoft YaHei,STHeiti,WenQuanYi Micro Hei,Helvetica,Arial,sans-serif;\n}","categories":[],"tags":[]},{"title":"link","url":"https://infullstack.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://infullstack.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://infullstack.github.io/tag/index.html","content":"","categories":[],"tags":[]}]