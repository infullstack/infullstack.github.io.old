[{"title":"2018","url":"https://infullstack.github.io/2018/01/01/2018/","content":"<p><img src=\"https://images.unsplash.com/photo-1451481454041-104482d8e284?auto=format&amp;fit=crop&amp;w=2550&amp;q=80\" alt=\"\"></p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"https://infullstack.github.io/2017/12/27/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"大数据技术文章索引","url":"https://infullstack.github.io/2017/07/05/大数据技术文章索引/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/filip-gielda-94858.jpg?imageView2/1/w/2400/h/800/\" alt=\"\"></p>\n<h2 id=\"存储格式\"><a href=\"#存储格式\" class=\"headerlink\" title=\"存储格式\"></a>存储格式</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/in-depth-analysis-of-parquet-column-storage-format\" target=\"_blank\" rel=\"noopener\">深入分析Parquet列式存储格式</a></li>\n<li><a href=\"http://dongxicheng.org/mapreduce-nextgen/columnar-storage-parquet-and-orc/\" target=\"_blank\" rel=\"noopener\">大数据开源列式存储引擎Parquet和ORC</a></li>\n<li><a href=\"https://www.iteblog.com/archives/1014.html\" target=\"_blank\" rel=\"noopener\">Hive:ORC File Format存储格式详解</a></li>\n</ul>\n<h2 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h2><ul>\n<li><a href=\"http://www.uml.org.cn/sjjm/201309044.asp\" target=\"_blank\" rel=\"noopener\">HDFS 原理、架构与特性介绍</a></li>\n<li><a href=\"http://blog.csdn.net/weixuehao/article/details/16967485\" target=\"_blank\" rel=\"noopener\">HDFS的运行原理</a></li>\n<li><a href=\"http://www.it165.net/admin/html/201407/3465.html\" target=\"_blank\" rel=\"noopener\">Namenode HA原理详解</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25928166\" target=\"_blank\" rel=\"noopener\">Apache Kudu 加速对频繁更新数据的分析</a></li>\n<li><a href=\"http://www.leiphone.com/news/201610/rRTDqNk6lQrInqje.html\" target=\"_blank\" rel=\"noopener\">基于内存的统一分布式存储系统 Alluxio 及其应用</a></li>\n</ul>\n<h2 id=\"计算引擎\"><a href=\"#计算引擎\" class=\"headerlink\" title=\"计算引擎\"></a>计算引擎</h2><ul>\n<li><a href=\"http://blog.jobbole.com/84089/\" target=\"_blank\" rel=\"noopener\">MapReduce框架详解</a></li>\n<li><a href=\"http://langyu.iteye.com/blog/992916\" target=\"_blank\" rel=\"noopener\">MapReduce:详解Shuffle过程</a></li>\n<li><a href=\"http://blog.csdn.net/lovehuangjiaju/article/details/48634607\" target=\"_blank\" rel=\"noopener\">Spark运行原理</a></li>\n<li><a href=\"http://tech.meituan.com/spark-tuning-basic.html\" target=\"_blank\" rel=\"noopener\">Spark性能优化指南</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-apache-flink/\" target=\"_blank\" rel=\"noopener\">新一代大数据处理引擎 Apache Flink</a></li>\n<li><a href=\"http://shiyanjun.cn/archives/1508.html\" target=\"_blank\" rel=\"noopener\">Apache Flink：特性、概念、组件栈、架构及原理分析</a></li>\n</ul>\n<h2 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h2><h2 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h2><ul>\n<li><a href=\"http://shiyanjun.cn/archives/1002.html\" target=\"_blank\" rel=\"noopener\">Hue安装配置实践</a></li>\n<li><a href=\"http://www.cnblogs.com/smartloli/p/5191155.html\" target=\"_blank\" rel=\"noopener\">Azkaban 作业调度</a></li>\n</ul>\n<h2 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h2><ul>\n<li><a href=\"http://blog.csdn.net/dbanote/article/details/8897599\" target=\"_blank\" rel=\"noopener\">[HBase] LSM树 VS B+树</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/70467\" target=\"_blank\" rel=\"noopener\">HBase在阿里的应用实践</a></li>\n</ul>\n<h2 id=\"SQL引擎\"><a href=\"#SQL引擎\" class=\"headerlink\" title=\"SQL引擎\"></a>SQL引擎</h2><ul>\n<li><a href=\"http://www.csdn.net/article/2013-12-04/2817707-Impala-Big-Data-Engine\" target=\"_blank\" rel=\"noopener\">Impala：新一代开源大数据分析引擎</a></li>\n<li><a href=\"http://www.infoq.com/cn/articles/apache-kylin-algorithm/\" target=\"_blank\" rel=\"noopener\">Apache Kylin的快速数据立方体算法——概述</a></li>\n<li><a href=\"http://tech.meituan.com/presto.html\" target=\"_blank\" rel=\"noopener\">Presto实现原理和美团的使用实践</a></li>\n</ul>\n<h2 id=\"流处理\"><a href=\"#流处理\" class=\"headerlink\" title=\"流处理\"></a>流处理</h2><ul>\n<li><a href=\"http://shiyanjun.cn/archives/1472.html\" target=\"_blank\" rel=\"noopener\">Apache Storm内部原理分析</a></li>\n</ul>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><ul>\n<li><a href=\"http://tech.meituan.com/mq-design.html\" target=\"_blank\" rel=\"noopener\">消息队列设计精要</a></li>\n<li><a href=\"http://www.jasongj.com/2015/01/02/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">Kafka深度解析</a></li>\n<li><p><a href=\"http://tech.meituan.com/kafka-fs-design-theory.html\" target=\"_blank\" rel=\"noopener\">Kafka文件存储机制那些事</a></p>\n<h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2></li>\n<li><p><a href=\"https://my.oschina.net/leejun2005/blog/288136\" target=\"_blank\" rel=\"noopener\">Flume NG 简介及配置实战</a></p>\n</li>\n<li><a href=\"http://shiyanjun.cn/archives/1497.html\" target=\"_blank\" rel=\"noopener\">Flume日志收集分层架构应用实践</a></li>\n<li><a href=\"http://student-lp.iteye.com/blog/2157983\" target=\"_blank\" rel=\"noopener\">Sqoop详解</a></li>\n<li><a href=\"http://tech.meituan.com/mt-log-system-arch.html\" target=\"_blank\" rel=\"noopener\">基于Flume的美团日志收集系统(一)架构和设计</a></li>\n</ul>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/kylin-apache-in-meituan-olap-scenarios-practice\" target=\"_blank\" rel=\"noopener\">Apache Kylin在美团数十亿数据OLAP场景下的实践</a></li>\n<li><a href=\"http://tech.meituan.com/spark-in-meituan.html\" target=\"_blank\" rel=\"noopener\">Spark在美团的实践</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s/OJdlpP62YWGmVnBWsfpVZw\" target=\"_blank\" rel=\"noopener\">携程实时用户行为系统实践</a></li>\n</ul>\n<h2 id=\"全文检索\"><a href=\"#全文检索\" class=\"headerlink\" title=\"全文检索\"></a>全文检索</h2><ul>\n<li><a href=\"http://www.shaheng.me/blog/2015/06/elasticsearch--.html\" target=\"_blank\" rel=\"noopener\">Elasticsearch架构原理</a></li>\n<li><p><a href=\"http://solr-vs-elasticsearch.com/\" target=\"_blank\" rel=\"noopener\">solr vs elasticsearch 功能比较</a></p>\n<h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2></li>\n<li><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-mahout/\" target=\"_blank\" rel=\"noopener\">Apache Mahout 简介</a></p>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><a href=\"http://mp.weixin.qq.com/s/mO9Ht3pBlvDUFd-cUmz99w\" target=\"_blank\" rel=\"noopener\">谷歌新发布的分布式数据库服务，是要打破CAP定理了吗？</a></li>\n<li><a href=\"https://m.aliyun.com/yunqi/articles/67000?tk=7msDtByJNMqIx7H1CqaPNnPbyUQ36CfaBHCMB9l9R4w%3D\" target=\"_blank\" rel=\"noopener\">分布式(hadoop)内核研发面试指南</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"shell逐行读取文本的几种方法","url":"https://infullstack.github.io/2017/05/22/shell逐行读取文本的几种方法/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/andreas-ronningen-31469.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<p>经常会对文体文件进行逐行处理，在Shell里面如何获取每行数据，然后处理该行数据，最后读取下一行数据，循环处理．有多种解决方法如下：</p>\n<h3 id=\"通过read命令完成．\"><a href=\"#通过read命令完成．\" class=\"headerlink\" title=\"通过read命令完成．\"></a>通过read命令完成．</h3><p>read命令接收标准输入，或其他文件描述符的输入，得到输入后，read命令将数据放入一个标准变量中．</p>\n<p>利用read读取文件时，每次调用read命令都会读取文件中的”一行”文本．</p>\n<p>当文件没有可读的行时，read命令将以非零状态退出．</p>\n<p>复制代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.dat | while read line</span><br><span class=\"line\">do</span><br><span class=\"line\">   echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"> </span><br><span class=\"line\">while read line</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done &lt; data.dat</span><br></pre></td></tr></table></figure></p>\n<p>2.使用awk命令完成</p>\n<p>awk是一种优良的文本处理工具，提供了极其强大的功能．</p>\n<p>利用awk读取文件中的每行数据，并且可以对每行数据做一些处理，还可以单独处理每行数据里的每列数据．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat data.dat | awk &apos;&#123;print $0&#125;&apos;</span><br><span class=\"line\">cat data.dat | awk &apos;for(i=2;i&lt;NF;i++) &#123;printf $i&#125; printf &quot;\\n&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>第1行代码输出data.dat里的每行数据，第2代码输出每行中从第2列之后的数据．</p>\n<p>如果是单纯的数据或文本文件的按行读取和显示的话，使用awk命令比较方便．</p>\n<p>3.使用for var in file 命令完成</p>\n<p>for var in file　表示变量var在file中循环取值．取值的分隔符由$IFS确定．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(cat data.dat)</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"> </span><br><span class=\"line\">for line in `cat data.dat`</span><br><span class=\"line\">do </span><br><span class=\"line\">    echo &quot;File:$&#123;line&#125;&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>如果输入文本每行中没有空格，则line在输入文本中按换行符分隔符循环取值．</p>\n<p>如果输入文本中包括空格或制表符，则不是换行读取，line在输入文本中按空格分隔符或制表符或换行符特环取值．</p>\n<p>可以通过把IFS设置为换行符来达到逐行读取的功能．</p>\n<p>IFS的默认值为：空白(包括：空格，制表符，换行符)．</p>\n<h3 id=\"字符串split\"><a href=\"#字符串split\" class=\"headerlink\" title=\"字符串split\"></a>字符串split</h3><p>获取到每行的文本字符串，也许还会用到字符串的切分，可以使用以下方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp_str=&quot;a,b,c&quot;</span><br><span class=\"line\">table=($&#123;tmp_str//,/ &#125;)</span><br><span class=\"line\">table_name=$&#123;table[1]&#125;</span><br><span class=\"line\">cube_name=$&#123;table[0]&#125;</span><br><span class=\"line\">echo $table_name $cube_name</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"读阿里开发手册","url":"https://infullstack.github.io/2017/03/10/【笔记】阿里开发手册/","content":"<p><img src=\"http://okzvb3705.bkt.clouddn.com/galymzhan-abdugalimov-181.jpg?imageView2/1/w/1980/h/900/\" alt=\"\"></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>阿里作为全世界Java开发规模最大和应用水平最高的地方之一，三十几页的规范，从编程、异常日志、SQL、工程、安全五块形成的规约总结，根据约束力，分强制、推荐、参考三大类，可以作为优秀技术团队的重要利器。</p>\n<p><strong>官方文档地址：<a href=\"https://yq.aliyun.com/articles/69327?utm_content=m_10088\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/69327?utm_content=m_10088</a></strong></p>\n<p>以下是阅读阿里开发手册中，记录的一些重要摘要信息。</p>\n<h2 id=\"编程规范\"><a href=\"#编程规范\" class=\"headerlink\" title=\"编程规范\"></a>编程规范</h2><h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><ol>\n<li>尽量语义清晰、望名知义</li>\n<li>遵从驼峰形式</li>\n<li>如果使用到了设计模式，类名体现具体模式</li>\n</ol>\n<h3 id=\"常量定义\"><a href=\"#常量定义\" class=\"headerlink\" title=\"常量定义\"></a>常量定义</h3><ol>\n<li>值定义不要出现未定义的常量</li>\n<li>常量类推荐也分类定义常量类，不要大而全的一个常量类</li>\n<li>变量值在一定范围，使用Enum类</li>\n</ol>\n<h3 id=\"格式规约\"><a href=\"#格式规约\" class=\"headerlink\" title=\"格式规约\"></a>格式规约</h3><ol>\n<li>单行限制不超过120个字符</li>\n</ol>\n<p>看注释内容，示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t// 缩进4个空格</span><br><span class=\"line\">\tString say = &quot;hello&quot;;</span><br><span class=\"line\">\t// 运算符的左右必须有一个空格</span><br><span class=\"line\">\tint flag = 0;</span><br><span class=\"line\">\t// 关键词if与括号之间必须有一个空格，括号内的f与左括号，0与右括号不需要空格</span><br><span class=\"line\">\tif (flag == 0) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(say);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 左大括号前加空格且不换行；左大括号后换行</span><br><span class=\"line\">\tif (flag == 1) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;world&quot;);</span><br><span class=\"line\">\t\t// 右大括号前换行，右大括号后有else，不用换行</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;ok&quot;);</span><br><span class=\"line\">\t\t// 在右大括号后直接结束，则必须换行</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"OOP规约\"><a href=\"#OOP规约\" class=\"headerlink\" title=\"OOP规约\"></a>OOP规约</h3><ol>\n<li>overwrite方法，必须有@overwrite注解</li>\n<li>静态方法和变量，直接通过类名访问，禁止对象访问，增加无谓的编译器解释成本</li>\n<li>不能使用过时的类或方法</li>\n<li>包装类之间的值比较，使用equals方法</li>\n<li><strong>构造方法禁止加入任何业务逻辑，请放在init方法中</strong></li>\n<li>String的split方法，做分隔符后无内容的检测</li>\n<li>类方法定义的顺序，公有方法或保护方法 &gt; 私有方法 &gt; getter/setter方法</li>\n<li>getter/setter方法尽量不要加入任何业务逻辑，增加排查问题的难度</li>\n<li>推荐使用StringBuilder的append方法替换string拼接</li>\n</ol>\n<h3 id=\"集合处理\"><a href=\"#集合处理\" class=\"headerlink\" title=\"集合处理\"></a>集合处理</h3><h3 id=\"并发处理\"><a href=\"#并发处理\" class=\"headerlink\" title=\"并发处理\"></a>并发处理</h3><ol>\n<li>线程定义名称</li>\n<li>使用线程池，使用ThreadPoolExecutor</li>\n<li>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</li>\n<li>使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法可以执行，避免主线程无法执行至await方法，直到超时才返回结果。</li>\n</ol>\n<h3 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h3><p>1.推荐尽量少用else， if-else的方式可以改写成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (condition) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 接着写else的业务逻辑代码;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>a</li>\n</ol>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ol>\n<li>类、属性、方法，使用/<em>*内容</em>/定义注释，不得使用//注释</li>\n<li>抽象方法、枚举，详细注释</li>\n<li>注释掉的代码，配合说明</li>\n</ol>\n<h2 id=\"异常日志\"><a href=\"#异常日志\" class=\"headerlink\" title=\"异常日志\"></a>异常日志</h2><h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><ol>\n<li>RuntimeException预先检查进行规避，避免IndexOutofBoundsException/NullPointerException</li>\n<li>异常不能用来做流程控制、条件控制，比条件判断效率低</li>\n<li>finally需要关闭资源、流、连接等</li>\n<li>避免出现重复代码</li>\n</ol>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><ol>\n<li>使用SLF4J日志框架的API，不直接使用log4j/logback</li>\n<li>日志文件命名，含义清晰</li>\n<li><p>异常信息，包含现场信息和堆栈信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logger.error(各类参数或者对象toString + &quot;_&quot; + e.getMessage(), e);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用条件输出或占位输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正例：（条件）</span><br><span class=\"line\">if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">    logger.debug(&quot;Processing trade with id: &quot; + id + &quot; symbol: &quot; + symbol);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正例：（占位符）</span><br><span class=\"line\">logger.debug(&quot;Processing trade with id: &#123;&#125; symbol : &#123;&#125; &quot;, id, symbol);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL规约中，MySQL使用方法都是比较有用的经验之选，推荐都仔细研读。</p>\n<p>###　建表</p>\n<ol>\n<li>使用小写字母，数字，下划线命名</li>\n<li>尽量不修改表名、字段名</li>\n<li>主键pk<em> ,索引 idx</em> ,唯一 uk_</li>\n<li>小数类型为decimal，禁止使用float和double。</li>\n<li>如果存储的字符串长度几乎相等，使用char定长字符串类型</li>\n</ol>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ol>\n<li>join字段类型一致、禁止超过3表join</li>\n<li>在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。 说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为20的索引，区分度会高达90%以上，可以使用count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</li>\n<li>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。右模糊可以利用b+树最左前缀匹配</li>\n<li>利用延迟关联或者子查询优化超多分页场景。 说明：MySQL并不是跳过offset行，而是取offset+N行，然后返回放弃前offset行，返回N行，那当offset特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行SQL改写。 正例：先快速定位需要获取的id段，然后再关联： SELECT a.* FROM 表1 a, (select id from 表1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</li>\n</ol>\n<h3 id=\"SQL规约\"><a href=\"#SQL规约\" class=\"headerlink\" title=\"SQL规约\"></a>SQL规约</h3><ol>\n<li>【强制】不要使用count(列名)或count(常量)来替代count(<em>)，count(</em>)是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。 说明：count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。</li>\n<li>【强制】count(distinct col) 计算该列除NULL之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。</li>\n<li>【强制】当某一列的值全是NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题。</li>\n</ol>\n<h3 id=\"ORM规约\"><a href=\"#ORM规约\" class=\"headerlink\" title=\"ORM规约\"></a>ORM规约</h3><ol>\n<li>在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。</li>\n<li>@Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</li>\n</ol>\n<h2 id=\"工程规约\"><a href=\"#工程规约\" class=\"headerlink\" title=\"工程规约\"></a>工程规约</h2><h3 id=\"应用分层\"><a href=\"#应用分层\" class=\"headerlink\" title=\"应用分层\"></a>应用分层</h3><p><a href=\"http://infullstack.com/?attachment_id=242\" rel=\"noopener\" target=\"_blank\"><img src=\"http://infullstack.com/wp-content/uploads/2017/03/微信图片_20170310171602.png\" alt=\"\" width=\"400\" height=\"345\" class=\"aligncenter size-full wp-image-242\"></a></p>\n<p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web层，也可以直接依赖于Service层，依此类推：</p>\n<ul>\n<li>开放接口层：可直接封装Service方法暴露成RPC接口；通过Web封装成http接口；进行网关安全控制、流量控制等。</li>\n<li>终端显示层：各个端的模板渲染并执行显示的层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示等。</li>\n<li>Web层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>\n<li>Service层：相对具体的业务逻辑服务层。</li>\n<li>Manager层：通用业务处理层，它有如下特征： 1） 对第三方平台封装的层，预处理返回结果及转化异常信息； 2） 对Service层通用能力的下沉，如缓存方案、中间件通用处理； 3） 与DAO层交互，对多个DAO的组合复用。</li>\n<li>DAO层：数据访问层，与底层MySQL、Oracle、Hbase进行数据交互。</li>\n<li>外部接口或第三方平台：包括其它部门RPC开放接口，基础平台，其它公司的HTTP接口。</li>\n</ul>\n<h3 id=\"服务器规约\"><a href=\"#服务器规约\" class=\"headerlink\" title=\"服务器规约\"></a>服务器规约</h3><ol>\n<li>给JVM设置-XX:+HeapDumpOnOutOfMemoryError参数，让JVM碰到OOM场景时输出dump信息。</li>\n<li>高并发服务器建议调小TCP协议的time_wait超时时间。</li>\n</ol>\n<h2 id=\"安全规约\"><a href=\"#安全规约\" class=\"headerlink\" title=\"安全规约\"></a>安全规约</h2><p>用户请求传入的任何参数必须做有效性验证。 说明：忽略参数校验可能导致：</p>\n<ul>\n<li>page size过大导致内存溢出</li>\n<li>恶意order by导致数据库慢查询</li>\n<li>任意重定向</li>\n<li>SQL注入</li>\n<li>反序列化注入</li>\n<li>正则输入源串拒绝服务ReDoS</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"分层领域模型规约\"><a href=\"#分层领域模型规约\" class=\"headerlink\" title=\"分层领域模型规约\"></a>分层领域模型规约</h3><ul>\n<li><strong>DO（Data Object）</strong>：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li>\n<li><strong>DTO（Data Transfer Object）</strong>：数据传输对象，Service和Manager向外传输的对象。</li>\n<li><strong>BO（Business Object）</strong>：业务对象。可以由Service层输出的封装业务逻辑的对象。</li>\n<li><strong>QUERY</strong>：数据查询对象，各层接收上层的查询请求。注：超过2个参数的查询封装，禁止使用Map类来传输。</li>\n<li><strong>VO（View Object）</strong>：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li>\n</ul>\n<h3 id=\"专有名词\"><a href=\"#专有名词\" class=\"headerlink\" title=\"专有名词\"></a>专有名词</h3><ol>\n<li><strong>POJO</strong>（Plain Ordinary Java Object）：在本规约中，POJO专指只有setter/getter/toString的简单类，包括DO/DTO/BO/VO等。 </li>\n<li><strong>DO</strong>（Data Object）：本手册指数据库表一一对应的POJO类。 </li>\n<li><strong>GAV</strong>（GroupId、ArtifactctId、Version）：Maven坐标，是用来唯一标识jar包。 </li>\n<li><strong>OOP</strong>（Object Oriented Programming）: 本手册泛指类、对象的编程处理方式。 </li>\n<li><strong>ORM</strong>（Object Relation Mapping）: 对象关系映射，对象领域模型与底层数据之间的转换，本文泛指iBATIS, mybatis等框架。 </li>\n<li><strong>NPE</strong>（java.lang.NullPointerException）: 空指针异常。 </li>\n<li><strong>一方库</strong>：本工程内部子项目模块依赖的库（jar包）。 </li>\n<li><strong>二方库</strong>：公司内部发布到中央仓库，可供公司内部依赖的库（jar包）。 </li>\n<li><strong>三方库</strong>：公司之外的开源的依赖库（jar包）</li>\n</ol>\n<p><strong>官方文档地址：<a href=\"https://yq.aliyun.com/articles/69327?utm_content=m_10088\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/69327?utm_content=m_10088</a></strong></p>\n","categories":[],"tags":[]},{"title":"shell通用日志函数","url":"https://infullstack.github.io/2017/01/11/shell通用日志函数/","content":"<p>为了方便调试，写了一个通用的日志函数，实现功能：</p>\n<ol>\n<li>设定日志级别，实现可以输出不同级别的日志信息 </li>\n<li>日志格式类似为：[日志级别] 时间 funcname:函数名 [lineno:行号] 日志信息 </li>\n<li>不同级别，设定不同颜色 </li>\n</ol>\n<p><strong>代码:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function log &#123;</span><br><span class=\"line\">    local text;local logtype</span><br><span class=\"line\">    logfile=/var/log/mylog/mylog.log</span><br><span class=\"line\">    logtype=$1</span><br><span class=\"line\">    text=$2</span><br><span class=\"line\">\tmessage=&quot;`date +&apos;%F %H:%M:%S&apos;` $1 line:$LINENO $2&quot;</span><br><span class=\"line\">    case $logtype in </span><br><span class=\"line\">        error)</span><br><span class=\"line\">            echo -e &quot;\\033[31m$&#123;message&#125;\\033[0m&quot; | tee -a $logfile;;</span><br><span class=\"line\">        info)</span><br><span class=\"line\">            echo -e &quot;\\033[32m$&#123;message&#125;\\033[0m&quot; | tee -a $logfile;;</span><br><span class=\"line\">        warn)</span><br><span class=\"line\">            echo -e &quot;\\033[33m$&#123;message&#125;\\033[0m&quot; | tee -a $logfile;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log info &quot;this&apos;s info log&quot;</span><br><span class=\"line\">log error &quot;this&apos;s error log&quot;</span><br><span class=\"line\">log warn &quot;this&apos;s warn log&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>注:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local : 局部变量</span><br><span class=\"line\">$LINENO：shell 脚本行数</span><br><span class=\"line\">$1 $2 ：函数参数</span><br><span class=\"line\">tee 输出到控制台和文件</span><br><span class=\"line\">\\033[31m \\033[0m : echo 输出颜色</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"nginx负载均衡","url":"https://infullstack.github.io/2017/01/03/nginx负载均衡/","content":"<p>nginx可以按照调度规则实现动态、静态页面的分离，也可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。</p>\n<p>nginx的upstream目前支持的5种方式的分配</p>\n<p><strong>1.轮询（默认）</strong></p>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server 192.168.0.14; </span><br><span class=\"line\">    server 192.168.0.15; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.指定权重</strong></p>\n<p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server 192.168.0.14 weight=10; </span><br><span class=\"line\">    server 192.168.0.15 weight=10; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.IP绑定 ip_hash (session绑定)</strong></p>\n<p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    ip_hash; </span><br><span class=\"line\">    server 192.168.0.14:88; </span><br><span class=\"line\">    server 192.168.0.15:80; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4.fair（第三方）</strong></p>\n<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server server1; </span><br><span class=\"line\">    server server2; </span><br><span class=\"line\">    fair; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>5.url_hash（第三方）</strong></p>\n<p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backserver &#123; </span><br><span class=\"line\">    server squid1:3128; </span><br><span class=\"line\">    server squid2:3128; </span><br><span class=\"line\">    hash $request_uri; </span><br><span class=\"line\">    hash_method crc32; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在需要使用负载均衡的server中增加<br>示例配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http://backserver/; </span><br><span class=\"line\">upstream backserver&#123; </span><br><span class=\"line\">    ip_hash; </span><br><span class=\"line\">    server 127.0.0.1:9090 down; (down 表示单前的server暂时不参与负载) </span><br><span class=\"line\">    server 127.0.0.1:8080 weight=2; (weight 默认为1.weight越大，负载的权重就越大) </span><br><span class=\"line\">    server 127.0.0.1:6060; </span><br><span class=\"line\">    server 127.0.0.1:7070 backup; (其它所有的非backup机器down或者忙的时候，请求backup机器) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误</span><br><span class=\"line\">fail_timeout:max_fails次失败后，暂停的时间</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"Nginx+Tomcat实现应用负载均衡","url":"https://infullstack.github.io/2016/12/30/Nginx-Tomcat实现应用负载均衡/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>当单个应用服务器压力过大时，可以使用多个应用服务器提供服务减轻单服务器的压力，再结合一个代理转发服务器，完成tomcat的负载均衡。</p>\n<p>部署架构图<br><img src=\"http://infullstack.com/wp-content/uploads/2016/12/nginx_tomcat.png\" alt=\"\" width=\"500\" class=\"aligncenter size-full wp-image-100\"></p>\n<p>特点：<br>当请求达到nginx，nginx会根据weight和配置的服务器列表，完成请求的转发，实现应用服务器的负载均衡。<br>该架构适用于无状态共享的应用服务，因为session并没有设置共享。</p>\n<h3 id=\"用到工具\"><a href=\"#用到工具\" class=\"headerlink\" title=\"用到工具\"></a>用到工具</h3><ul>\n<li>nginx 1.10</li>\n<li>tomcat 1.8</li>\n</ul>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p><em>三个节点</em></p>\n<ul>\n<li>172.16.2.41 Tomcat  tomcat_41</li>\n<li>172.16.2.42 Tomcat  tomcat_42</li>\n<li>172.16.2.43 Nginx   nginx_43</li>\n</ul>\n<h2 id=\"配置tomcat\"><a href=\"#配置tomcat\" class=\"headerlink\" title=\"配置tomcat\"></a>配置tomcat</h2><h3 id=\"配置端口-conf-server-xml\"><a href=\"#配置端口-conf-server-xml\" class=\"headerlink\" title=\"配置端口(conf/server.xml)\"></a>配置端口(conf/server.xml)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;1010&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">               connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新增首页\"><a href=\"#新增首页\" class=\"headerlink\" title=\"新增首页\"></a>新增首页</h3><p>新增应用服务器首页，tomcat/webapps/ROOT/index.html</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@bigdata01 ROOT]<span class=\"comment\"># echo 'tomcat at 41 !' &gt; index.html</span></span><br><span class=\"line\">[root@bigdata01 ROOT]<span class=\"comment\"># cat index.html </span></span><br><span class=\"line\">tomcat at 41 !</span><br><span class=\"line\">[root@bigdata01 ROOT]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动tomcat\"><a href=\"#启动tomcat\" class=\"headerlink\" title=\"启动tomcat\"></a>启动tomcat</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@transwarp1 bin]<span class=\"comment\"># ./startup.sh </span></span><br><span class=\"line\">Using CATALINA_BASE:   /mnt/disk1/ray/tomcat</span><br><span class=\"line\">Using CATALINA_HOME:   /mnt/disk1/ray/tomcat</span><br><span class=\"line\">Using CATALINA_TMPDIR: /mnt/disk1/ray/tomcat/temp</span><br><span class=\"line\">Using JRE_HOME:        /usr/java/latest</span><br><span class=\"line\">Using CLASSPATH:       /mnt/disk1/ray/tomcat/bin/bootstrap.jar:/mnt/disk1/ray/tomcat/bin/tomcat-juli.jar</span><br><span class=\"line\">Tomcat started.</span><br><span class=\"line\">[root@transwarp1 bin]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置tomcat2\"><a href=\"#配置tomcat2\" class=\"headerlink\" title=\"配置tomcat2\"></a>配置tomcat2</h3><p>方法同上。</p>\n<h2 id=\"部署Nginx\"><a href=\"#部署Nginx\" class=\"headerlink\" title=\"部署Nginx\"></a>部署Nginx</h2><h2 id=\"Nginx-安装\"><a href=\"#Nginx-安装\" class=\"headerlink\" title=\"Nginx 安装\"></a>Nginx 安装</h2><p>参考文章：<a href=\"http://www.runoob.com/linux/nginx-install-setup.html\" target=\"_blank\" rel=\"noopener\">Nginx 安装配置</a></p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream infullstack.com&#123;  #集群名称</span><br><span class=\"line\">\t    server\t172.16.2.41:1010\tweight=1;# 服务器列表，请求会转发到这些服务器</span><br><span class=\"line\">\t    server\t172.16.2.42:1010\tweight=2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       88;  # nginx端口</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass\thttp://infullstack.com; #集群名称</span><br><span class=\"line\">            proxy_redirect\tdefault;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动和访问Nginx\"><a href=\"#启动和访问Nginx\" class=\"headerlink\" title=\"启动和访问Nginx\"></a>启动和访问Nginx</h2><p>访问<a href=\"http://172.16.2.43:88/\" target=\"_blank\" rel=\"noopener\">http://172.16.2.43:88/</a></p>\n<p>刷新页面，会发现请求会转发到41和42服务器</p>\n<p><img src=\"http://infullstack.com/wp-content/uploads/2016/12/41.png\" alt=\"\" width=\"505\" height=\"142\" class=\"alignnone size-full wp-image-101\"><br><img src=\"http://infullstack.com/wp-content/uploads/2016/12/42.png\" alt=\"\" width=\"586\" height=\"189\" class=\"alignnone size-full wp-image-102\"></p>\n<p>根据应用服务器的配置和需求，可以修改weight，配置服务器的权重。</p>\n","categories":[],"tags":[]},{"title":"实现shell并发","url":"https://infullstack.github.io/2016/12/09/实现shell并发/","content":"<p>经常在工作中遇到执行的脚本需要并发执行，提高效率。</p>\n<ul>\n<li>常规脚本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!bin/sh</span><br><span class=\"line\">for((i=1;i&lt;=5;i++));do</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sleep 3;</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>执行：time bash test.sh<br>执行结果：总共耗时15秒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@pc disk1]# time sh test.sh</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m15.010s</span><br><span class=\"line\">user\t0m0.003s</span><br><span class=\"line\">sys\t0m0.005s</span><br><span class=\"line\">[root@pc disk1]#</span><br></pre></td></tr></table></figure>\n<ul>\n<li>并发脚本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!bin/sh</span><br><span class=\"line\">for((i=1;i&lt;=5;i++));do</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sleep 3;</span><br><span class=\"line\">    echo $i</span><br><span class=\"line\">&#125;&amp;</span><br><span class=\"line\">done</span><br><span class=\"line\">wait</span><br><span class=\"line\">echo &apos;over&apos;</span><br></pre></td></tr></table></figure>\n<p>每次for循环后加了一个后台执行&amp;符号，那5个循环任务会并发执行,执行：time bash concurrent.sh<br>执行结果：总耗时3秒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@pc disk1]# time sh concurrent.sh </span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">over</span><br><span class=\"line\"></span><br><span class=\"line\">real\t0m3.004s</span><br><span class=\"line\">user\t0m0.001s</span><br><span class=\"line\">sys\t0m0.002s</span><br><span class=\"line\">[root@pc disk1]#</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wait的作用：等待前面后台执行的任务全部结束再往下执行，否则程序会直接执行结束。当然后台执行的脚本还会继续执行，只不过会影响wait后续的代码。</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"Linux配置supervisor管理进程","url":"https://infullstack.github.io/2016/12/09/Linux配置supervisor管理进程/","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Supervisor是由python语言编写，基于linux操作系统的一款服务器管理工具，<br>用以监控服务器的运行，发现问题能立即自动预警及自动重启等功能。</p>\n<h3 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h3><ul>\n<li>Centos 6.5</li>\n<li>Python 2.6.6</li>\n</ul>\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><ul>\n<li>supervisor</li>\n<li>meld(python html模版引擎)</li>\n</ul>\n<p>下载地址：</p>\n<p>meld3 <a href=\"http://www.plope.com/software/meld3/meld3-0.6.5.tar.gz\" target=\"_blank\" rel=\"noopener\">http://www.plope.com/software/meld3/meld3-0.6.5.tar.gz</a></p>\n<p>supervisor</p>\n<p><a href=\"http://pypi.python.org/packages/source/s/supervisor/supervisor-3.0b1.tar.gz\" target=\"_blank\" rel=\"noopener\">http://pypi.python.org/packages/source/s/supervisor/supervisor-3.0b1.tar.gz</a></p>\n<p>下载解压，分别执行python setup.py install安装</p>\n<h3 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h3><ol>\n<li>创建配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 增加web监控服务</span><br><span class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">port=0.0.0.0:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">username=user              ; (default is no username (open server))</span><br><span class=\"line\">password=123               ; (default is no password (open server))</span><br><span class=\"line\"></span><br><span class=\"line\"># 增加监控程序</span><br><span class=\"line\">[program:tail1]                                                                            </span><br><span class=\"line\">command=tail -f  /etc/supervisord.conf   ;常驻后台的命令</span><br><span class=\"line\">autostart=true                           ;是否随supervisor启动</span><br><span class=\"line\">autorestart=true                         ;是否在挂了之后重启，意外关闭后会重启，比如kill掉！</span><br><span class=\"line\">startretries=3                           ;启动尝试次数</span><br><span class=\"line\">stderr_logfile=/tmp/tail1.err.log        ;标准输出的位置</span><br><span class=\"line\">stdout_logfile=/tmp/tail1.out.log        ;标准错误输出的位置</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以监控目录下配置文件，监控/etc/supervisord.d/目录下conf后缀文件，conf中配置监控程序</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动监控\"><a href=\"#启动监控\" class=\"headerlink\" title=\"启动监控\"></a>启动监控</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n<p>访问浏览器ip:9001</p>\n<p><img src=\"http://infullstack.com/wp-content/uploads/2016/12/supervisor.png\" alt=\"\"></p>\n<h3 id=\"supervisorctl管理程序进程\"><a href=\"#supervisorctl管理程序进程\" class=\"headerlink\" title=\"supervisorctl管理程序进程\"></a>supervisorctl管理程序进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查询状态</span><br><span class=\"line\">upervisorctl status        </span><br><span class=\"line\"># 开启服务</span><br><span class=\"line\">supervisorctl start hello    </span><br><span class=\"line\"># 关闭服务</span><br><span class=\"line\">supervisorctl stop hello</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是programname</span><br><span class=\"line\">supervisorctl stop programname</span><br><span class=\"line\"># 启动某个进程</span><br><span class=\"line\">supervisorctl start programname</span><br><span class=\"line\"># 重启某个进程</span><br><span class=\"line\">supervisorctl restart programname</span><br><span class=\"line\"># 重启所有属于名为groupworker这个分组的进程(start,restart同理)</span><br><span class=\"line\">supervisorctl stop groupworker</span><br><span class=\"line\"># 停止全部进程，注：start、restart、stop都不会载入最新的配置文件</span><br><span class=\"line\">supervisorctl stop all</span><br><span class=\"line\"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br><span class=\"line\">supervisorctl reload</span><br><span class=\"line\">根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br><span class=\"line\">supervisorctl update，</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加程序启动停止脚本\"><a href=\"#增加程序启动停止脚本\" class=\"headerlink\" title=\"增加程序启动停止脚本\"></a>增加程序启动停止脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">#</span><br><span class=\"line\"># /etc/init.d/supervisord</span><br><span class=\"line\">#</span><br><span class=\"line\"># Supervisor is a client/server system that</span><br><span class=\"line\"># allows its users to monitor and control a</span><br><span class=\"line\"># number of processes on UNIX-like operating</span><br><span class=\"line\"># systems.</span><br><span class=\"line\">#</span><br><span class=\"line\"># chkconfig: - 64 36</span><br><span class=\"line\"># description: Supervisor Server</span><br><span class=\"line\"># processname: supervisord</span><br><span class=\"line\"> </span><br><span class=\"line\"># Source init functions</span><br><span class=\"line\">. /etc/rc.d/init.d/functions</span><br><span class=\"line\"> </span><br><span class=\"line\">prog=&quot;supervisord&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">prefix=&quot;/usr&quot;</span><br><span class=\"line\">exec_prefix=&quot;$&#123;prefix&#125;&quot;</span><br><span class=\"line\">prog_bin=&quot;$&#123;exec_prefix&#125;/bin/supervisord&quot;</span><br><span class=\"line\">PIDFILE=&quot;/var/run/$prog.pid&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       echo -n $&quot;Starting $prog: &quot;</span><br><span class=\"line\">       ###注意下面这一行一定得有-c /etc/supervisord.conf   不然修改了配置文件根本不生效！</span><br><span class=\"line\">       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE</span><br><span class=\"line\">       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;</span><br><span class=\"line\">       echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">stop()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       echo -n $&quot;Shutting down $prog: &quot;</span><br><span class=\"line\">       [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;</span><br><span class=\"line\">       echo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\"> </span><br><span class=\"line\"> start)</span><br><span class=\"line\">   start</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> stop)</span><br><span class=\"line\">   stop</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> status)</span><br><span class=\"line\">       status $prog</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> restart)</span><br><span class=\"line\">   stop</span><br><span class=\"line\">   start</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> *)</span><br><span class=\"line\">   echo &quot;Usage: $0 &#123;start|stop|restart|status&#125;&quot;</span><br><span class=\"line\"> ;;</span><br><span class=\"line\"> </span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>然后加入启动项呗</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/supervisord</span><br><span class=\"line\">chkconfig --add supervisord</span><br><span class=\"line\">chkconfig supervisord on</span><br><span class=\"line\">service supervisord start</span><br></pre></td></tr></table></figure>\n<p>这样可以通过/etc/init.d/supervisord start | stop |restart 来管理supervisord</p>\n<p>参考内容：<a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"noopener\">http://supervisord.org/</a></p>\n<h3 id=\"概述-1\"><a href=\"#概述-1\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Flume为数据采集工具，但缺乏监控工具，Flume进程的状态不能实时看到，且进程停止不回自动重启，可以利用Supervisor来完成这些工作。</p>\n<h3 id=\"安装配置Supervisor\"><a href=\"#安装配置Supervisor\" class=\"headerlink\" title=\"安装配置Supervisor\"></a>安装配置Supervisor</h3><p>参考文章 <a href=\"http://infullstack.com/linux_supervisor.html\" target=\"_blank\" rel=\"noopener\">http://infullstack.com/linux_supervisor.html</a></p>\n<h3 id=\"配置-etc-supervisord-conf\"><a href=\"#配置-etc-supervisord-conf\" class=\"headerlink\" title=\"配置/etc/supervisord.conf\"></a>配置/etc/supervisord.conf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:flume] </span><br><span class=\"line\">command=sh /usr/lib/flume/bin/flume-ng agent --conf /usr/lib/flume/conf/ -f /usr/lib/flume/conf/flume.conf -n agent1 -Dflume.root.logger=INFO,console</span><br><span class=\"line\">autostart=true                           ;是否随supervisor启动</span><br><span class=\"line\">autorestart=true                         ;是否在挂了之后重启，意外关闭后会重启，比如kill掉！</span><br><span class=\"line\">startretries=3                           ;启动尝试次数</span><br><span class=\"line\">stderr_logfile=/tmp/flume.err.log        ;标准输出的位置</span><br><span class=\"line\">stdout_logfile=/tmp/flume.out.log        ;标准错误输出的位置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以监控目录下配置文件，监控/etc/supervisord.d/目录下conf后缀文件，conf文件中配置监控上述内容</span><br><span class=\"line\">[include]</span><br><span class=\"line\">files=/etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>程序不需要提前启动，supervisor启动的时候会启动Flume</p>\n","categories":[],"tags":[]},{"title":"MapReduce运行机制","url":"https://infullstack.github.io/2014/03/06/MapReduce运行机制/","content":"<p><img src=\"http://ww3.sinaimg.cn/mw690/005WTVurjw1eoyphmo5cmj30g00bvta7.jpg\" alt=\"\"></p>\n<p>从逻辑实体的角度讲解mapreduce运行机制，这些按照时间顺序包括：输入分片（input split）、map阶段、combiner阶段、shuffle阶段和reduce阶段。</p>\n<ol>\n<li><p>输入分片（input split）：在进行map计算之前，mapreduce会根据输入文件计算输入分片（input split），每个输入分片（input split）针对一个map任务，输入分片（input split）存储的并非数据本身，而是一个分片长度和一个记录数据的位置的数组，输入分片（input split）往往和hdfs的block（块）关系很密切，假如我们设定hdfs的块的大小是64mb，如果我们输入有三个文件，大小分别是3mb、65mb和127mb，那么mapreduce会把3mb文件分为一个输入分片（input split），65mb则是两个输入分片（input split）而127mb也是两个输入分片（input split），换句话说我们如果在map计算前做输入分片调整，例如合并小文件，那么就会有5个map任务将执行，而且每个map执行的数据大小不均，这个也是mapreduce优化计算的一个关键点。</p>\n</li>\n<li><p>map阶段：就是程序员编写好的map函数了，因此map函数效率相对好控制，而且一般map操作都是本地化操作也就是在数据存储节点上进行；</p>\n</li>\n<li><p>combiner阶段：combiner阶段是程序员可以选择的，combiner其实也是一种reduce操作，因此我们看见WordCount类里是用reduce进行加载的。Combiner是一个本地化的reduce操作，它是map运算的后续操作，主要是在map计算出中间文件前做一个简单的合并重复key值的操作，例如我们对文件里的单词频率做统计，map计算时候如果碰到一个hadoop的单词就会记录为1，但是这篇文章里hadoop可能会出现n多次，那么map输出文件冗余就会很多，因此在reduce计算前对相同的key做一个合并操作，那么文件会变小，这样就提高了宽带的传输效率，毕竟hadoop计算力宽带资源往往是计算的瓶颈也是最为宝贵的资源，但是combiner操作是有风险的，使用它的原则是combiner的输入不会影响到reduce计算的最终输入，例如：如果计算只是求总数，最大值，最小值可以使用combiner，但是做平均值计算使用combiner的话，最终的reduce计算结果就会出错。</p>\n</li>\n<li><p>shuffle阶段：将map的输出作为reduce的输入的过程就是shuffle了，这个是mapreduce优化的重点地方。这里我不讲怎么优化shuffle阶段，讲讲shuffle阶段的原理，因为大部分的书籍里都没讲清楚shuffle阶段。Shuffle一开始就是map阶段做输出操作，一般mapreduce计算的都是海量数据，map输出时候不可能把所有文件都放到内存操作，因此map写入磁盘的过程十分的复杂，更何况map输出时候要对结果进行排序，内存开销是很大的，map在做输出时候会在内存里开启一个环形内存缓冲区，这个缓冲区专门用来输出的，默认大小是100mb，并且在配置文件里为这个缓冲区设定了一个阀值，默认是0.80（这个大小和阀值都是可以在配置文件里进行配置的），同时map还会为输出操作启动一个守护线程，如果缓冲区的内存达到了阀值的80%时候，这个守护线程就会把内容写到磁盘上，这个过程叫spill，另外的20%内存可以继续写入要写进磁盘的数据，写入磁盘和写入内存操作是互不干扰的，如果缓存区被撑满了，那么map就会阻塞写入内存的操作，让写入磁盘操作完成后再继续执行写入内存操作，前面我讲到写入磁盘前会有个排序操作，这个是在写入磁盘操作时候进行，不是在写入内存时候进行的，如果我们定义了combiner函数，那么排序前还会执行combiner操作。</p>\n<p> 每次spill操作也就是写入磁盘操作时候就会写一个溢出文件，也就是说在做map输出有几次spill就会产生多少个溢出文件，等map输出全部做完后，map会合并这些输出文件。这个过程里还会有一个Partitioner操作，对于这个操作很多人都很迷糊，其实Partitioner操作和map阶段的输入分片（Input split）很像，一个Partitioner对应一个reduce作业，如果我们mapreduce操作只有一个reduce操作，那么Partitioner就只有一个，如果我们有多个reduce操作，那么Partitioner对应的就会有多个，Partitioner因此就是reduce的输入分片，这个程序员可以编程控制，主要是根据实际key和value的值，根据实际业务类型或者为了更好的reduce负载均衡要求进行，这是提高reduce效率的一个关键所在。到了reduce阶段就是合并map输出文件了，Partitioner会找到对应的map输出文件，然后进行复制操作，复制操作时reduce会开启几个复制线程，这些线程默认个数是5个，程序员也可以在配置文件更改复制线程的个数，这个复制过程和map写入磁盘过程类似，也有阀值和内存大小，阀值一样可以在配置文件里配置，而内存大小是直接使用reduce的tasktracker的内存大小，复制时候reduce还会进行排序操作和合并文件操作，这些操作完了就会进行reduce计算了。</p>\n</li>\n<li><p>reduce阶段：和map函数一样也是程序员编写的，最终结果是存储在hdfs上的。</p>\n</li>\n</ol>\n","categories":[],"tags":[]},{"title":"生成不重复随机数简单算法","url":"https://infullstack.github.io/2011/09/08/生成不重复随机数简单算法/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Random;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author Ray 2011-9-8</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RandomTest &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 声明一个种子</span><br><span class=\"line\">        int seed[] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;</span><br><span class=\"line\">        // 存放生成后的数字</span><br><span class=\"line\">        int[] destArray = new int[seed.length];</span><br><span class=\"line\">        // 声明一个Random实例</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        // 循环种子</span><br><span class=\"line\">        for (int i = 0; i &lt; seed.length; i++) &#123;</span><br><span class=\"line\">            // 随机得到种子中的一个位置</span><br><span class=\"line\">            int j = random.nextInt(seed.length - i);</span><br><span class=\"line\">            // 把该位置上的种子输出</span><br><span class=\"line\">            destArray[i] = seed[j];</span><br><span class=\"line\">            // 把种子中末尾的种子替换得到的种子</span><br><span class=\"line\">            seed[j] = seed[seed.length - 1 - i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(destArray));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"about","url":"https://infullstack.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://infullstack.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://infullstack.github.io/css/personal-style.css","content":"/**.home_html{\n \tbackground-color: #0a0a0a;\n\tbackground-image: url(https://images.unsplash.com/photo-1501883590538-958e09295331?auto=format&fit=crop&w=2550&q=80);\n\tbackground-position: left top;\n\tbackground-size: cover;\n\tbackground-attachment: scroll;\n}**/\n\n.content-home .slogan{\n\tmargin:0px;\n\tfont-size: 18px;\n\tcolor: #000;\n\tmargin-top: 20px;\n}\n.content-home .location{\n\tcolor: #666\n}\n.content-home .avatar img{\n\twidth: 128px;\n\theight: 128px;\n}\n.content-home .nav .item a{\n\tcolor:#888;\n}\nhr{\n\tmax-width: 500px\n}\n.content-home .nav{\n\tmargin:0px;\n}\n.content-home *{\n\tfont-family: PingFang SC,Hiragino Sans GB,Microsoft YaHei,STHeiti,WenQuanYi Micro Hei,Helvetica,Arial,sans-serif;\n}","categories":[],"tags":[]},{"title":"link","url":"https://infullstack.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://infullstack.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://infullstack.github.io/tag/index.html","content":"","categories":[],"tags":[]}]